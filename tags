!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
A	linear_algebra.py	/^A = [[2,3],[3,5],[6,7]]$/;"	v
A	scratch/linear_algebra.py	/^A = [[1, 2, 3],  # A has 2 rows and 3 columns$/;"	v
A	scratch/mapreduce.py	/^A = [[3, 2, 0],$/;"	v
Any	scratch/databases.py	/^from typing import Tuple, Sequence, List, Any, Callable, Dict, Iterator$/;"	i
Any	scratch/decision_trees.py	/^from typing import Any$/;"	i
Any	scratch/decision_trees.py	/^from typing import NamedTuple, Union, Any$/;"	i
Any	scratch/mapreduce.py	/^from typing import Callable, Iterable, Any, Tuple$/;"	i
B	scratch/inference.py	/^def B(alpha: float, beta: float) -> float:$/;"	f
B	scratch/linear_algebra.py	/^B = [[1, 2],     # B has 3 rows and 2 columns$/;"	v
B	scratch/mapreduce.py	/^B = [[4, -1, 0],$/;"	v
BOY	scratch/probability.py	/^        BOY = 0$/;"	v	class:main.Kid
BeautifulSoup	scratch/getting_data.py	/^    from bs4 import BeautifulSoup$/;"	i
BeautifulSoup	scratch/getting_data.py	/^from bs4 import BeautifulSoup$/;"	i
BeautifulSoup	scratch/nlp.py	/^    from bs4 import BeautifulSoup$/;"	i
BeautifulSoup	scratch/nlp.py	/^from bs4 import BeautifulSoup$/;"	i
Callable	linear_algebra.py	/^from typing import List, Tuple, Callable$/;"	i
Callable	scratch/clustering.py	/^from typing import Callable$/;"	i
Callable	scratch/crash_course_in_python.py	/^from typing import Callable$/;"	i
Callable	scratch/databases.py	/^from typing import Tuple, Sequence, List, Any, Callable, Dict, Iterator$/;"	i
Callable	scratch/deep_learning.py	/^from typing import Callable$/;"	i
Callable	scratch/gradient_descent.py	/^from typing import Callable$/;"	i
Callable	scratch/linear_algebra.py	/^from typing import Callable$/;"	i
Callable	scratch/mapreduce.py	/^from typing import Callable, Iterable, Any, Tuple$/;"	i
Callable	scratch/multiple_regression.py	/^from typing import TypeVar, Callable$/;"	i
Candidate	scratch/decision_trees.py	/^class Candidate(NamedTuple):$/;"	c
Cluster	scratch/clustering.py	/^Cluster = Union[Leaf, Merged]$/;"	v
Counter	common_import.py	/^from collections import Counter$/;"	i
Counter	scratch/crash_course_in_python.py	/^from collections import Counter$/;"	i
Counter	scratch/crash_course_in_python.py	/^from collections import defaultdict, Counter$/;"	i
Counter	scratch/decision_trees.py	/^from collections import Counter$/;"	i
Counter	scratch/getting_data.py	/^    from collections import Counter$/;"	i
Counter	scratch/getting_data.py	/^from collections import Counter$/;"	i
Counter	scratch/introduction.py	/^from collections import Counter                   # not loaded by default$/;"	i
Counter	scratch/k_nearest_neighbors.py	/^from collections import Counter$/;"	i
Counter	scratch/mapreduce.py	/^from collections import Counter$/;"	i
Counter	scratch/naive_bayes.py	/^    from collections import Counter$/;"	i
Counter	scratch/network_analysis.py	/^from collections import Counter$/;"	i
Counter	scratch/nlp.py	/^from collections import Counter$/;"	i
Counter	scratch/probability.py	/^from collections import Counter$/;"	i
Counter	scratch/recommender_systems.py	/^from collections import Counter$/;"	i
Counter	scratch/statistics.py	/^from collections import Counter$/;"	i
Counter	scratch/visualization.py	/^from collections import Counter$/;"	i
Counter	scratch/working_with_data.py	/^from collections import Counter$/;"	i
Counter	stats_util.py	/^from collections import Counter$/;"	i
CountingClicker	scratch/crash_course_in_python.py	/^class CountingClicker:$/;"	c
D	scratch/nlp.py	/^D = len(documents)$/;"	v
DailyChange	scratch/working_with_data.py	/^class DailyChange(NamedTuple):$/;"	c
DecisionTree	scratch/decision_trees.py	/^DecisionTree = Union[Leaf, Split]$/;"	v
Dict	naive_bayes.py	/^from typing import List, Tuple, Dict, Iterable$/;"	i
Dict	scratch/crash_course_in_python.py	/^from typing import Dict, Iterable, Tuple$/;"	i
Dict	scratch/databases.py	/^from typing import Tuple, Sequence, List, Any, Callable, Dict, Iterator$/;"	i
Dict	scratch/decision_trees.py	/^from typing import Dict, TypeVar$/;"	i
Dict	scratch/getting_data.py	/^    from typing import Dict, Set$/;"	i
Dict	scratch/k_nearest_neighbors.py	/^    from typing import Dict$/;"	i
Dict	scratch/naive_bayes.py	/^from typing import List, Tuple, Dict, Iterable$/;"	i
Dict	scratch/network_analysis.py	/^from typing import Dict, List$/;"	i
Dict	scratch/nlp.py	/^from typing import List, Dict$/;"	i
Dict	scratch/recommender_systems.py	/^from typing import Dict, List, Tuple$/;"	i
Dict	scratch/working_with_data.py	/^from typing import List, Dict$/;"	i
Dropout	scratch/deep_learning.py	/^class Dropout(Layer):$/;"	c
Embedding	scratch/nlp.py	/^class Embedding(Layer):$/;"	c
EmbeddingOptimizer	scratch/nlp_advanced.py	/^class EmbeddingOptimizer(Optimizer):$/;"	c
Entry	scratch/mapreduce.py	/^class Entry(NamedTuple):$/;"	c
Friendships	scratch/network_analysis.py	/^Friendships = Dict[int, List[int]]$/;"	v
GIRL	scratch/probability.py	/^        GIRL = 1$/;"	v	class:main.Kid
GradientDescent	scratch/deep_learning.py	/^class GradientDescent(Optimizer):$/;"	c
GradientDescent	scratch/nlp.py	/^    from scratch.deep_learning import SoftmaxCrossEntropy, Momentum, GradientDescent$/;"	i
Grammar	scratch/nlp.py	/^Grammar = Dict[str, List[str]]$/;"	v
HavingClause	scratch/databases.py	/^HavingClause = Callable[[List[Row]], bool]  # Predicate over multiple rows$/;"	v
Iterable	naive_bayes.py	/^from typing import List, Tuple, Dict, Iterable$/;"	i
Iterable	scratch/crash_course_in_python.py	/^from typing import Dict, Iterable, Tuple$/;"	i
Iterable	scratch/deep_learning.py	/^from typing import Iterable, Tuple$/;"	i
Iterable	scratch/mapreduce.py	/^from typing import Callable, Iterable, Any, Tuple$/;"	i
Iterable	scratch/mapreduce.py	/^from typing import Iterable$/;"	i
Iterable	scratch/naive_bayes.py	/^from typing import List, Tuple, Dict, Iterable$/;"	i
Iterable	scratch/nlp.py	/^from typing import Iterable$/;"	i
Iterator	scratch/databases.py	/^from typing import Tuple, Sequence, List, Any, Callable, Dict, Iterator$/;"	i
Iterator	scratch/gradient_descent.py	/^from typing import TypeVar, List, Iterator$/;"	i
Iterator	scratch/mapreduce.py	/^from typing import Iterator, Tuple$/;"	i
K	scratch/nlp.py	/^K = 4$/;"	v
KMeans	scratch/clustering.py	/^class KMeans:$/;"	c
KV	scratch/mapreduce.py	/^KV = Tuple[Any, Any]$/;"	v
Kid	scratch/probability.py	/^    class Kid(enum.Enum):$/;"	c	function:main
L	scratch/crash_course_in_python.py	/^from typing import List  # note capital L$/;"	i
LabeledPoint	scratch/k_nearest_neighbors.py	/^class LabeledPoint(NamedTuple):$/;"	c
Layer	scratch/deep_learning.py	/^class Layer:$/;"	c
Layer	scratch/nlp.py	/^from scratch.deep_learning import Layer, Tensor, random_tensor, zeros_like$/;"	i
Layer	scratch/nlp_advanced.py	/^from scratch.deep_learning import Optimizer, Layer$/;"	i
Leaf	scratch/clustering.py	/^class Leaf(NamedTuple):$/;"	c
Leaf	scratch/decision_trees.py	/^class Leaf(NamedTuple):$/;"	c
Linear	scratch/deep_learning.py	/^class Linear(Layer):$/;"	c
Linear	scratch/nlp.py	/^    from scratch.deep_learning import Sequential, Linear$/;"	i
List	common_import.py	/^from typing import List$/;"	i
List	linear_algebra.py	/^from typing import List, Tuple, Callable$/;"	i
List	naive_bayes.py	/^from typing import List, Tuple, Dict, Iterable$/;"	i
List	scratch/clustering.py	/^from typing import List$/;"	i
List	scratch/crash_course_in_python.py	/^from typing import List  # note capital L$/;"	i
List	scratch/crash_course_in_python.py	/^from typing import List$/;"	i
List	scratch/databases.py	/^from typing import Tuple, Sequence, List, Any, Callable, Dict, Iterator$/;"	i
List	scratch/decision_trees.py	/^from typing import List$/;"	i
List	scratch/deep_learning.py	/^from typing import List$/;"	i
List	scratch/gradient_descent.py	/^from typing import TypeVar, List, Iterator$/;"	i
List	scratch/inference.py	/^from typing import List$/;"	i
List	scratch/k_nearest_neighbors.py	/^from typing import List$/;"	i
List	scratch/linear_algebra.py	/^from typing import List$/;"	i
List	scratch/logistic_regression.py	/^from typing import List$/;"	i
List	scratch/machine_learning.py	/^from typing import TypeVar, List, Tuple$/;"	i
List	scratch/mapreduce.py	/^from typing import List$/;"	i
List	scratch/multiple_regression.py	/^from typing import List$/;"	i
List	scratch/naive_bayes.py	/^from typing import List, Tuple, Dict, Iterable$/;"	i
List	scratch/network_analysis.py	/^from typing import Dict, List$/;"	i
List	scratch/neural_networks.py	/^from typing import List$/;"	i
List	scratch/nlp.py	/^from typing import List, Dict$/;"	i
List	scratch/recommender_systems.py	/^    from typing import List$/;"	i
List	scratch/recommender_systems.py	/^from typing import Dict, List, Tuple$/;"	i
List	scratch/statistics.py	/^from typing import List$/;"	i
List	scratch/working_with_data.py	/^    from typing import List$/;"	i
List	scratch/working_with_data.py	/^from typing import List$/;"	i
List	scratch/working_with_data.py	/^from typing import List, Dict$/;"	i
List	stats_util.py	/^from typing import List$/;"	i
Loss	scratch/deep_learning.py	/^class Loss:$/;"	c
Mapper	scratch/mapreduce.py	/^Mapper = Callable[..., Iterable[KV]]$/;"	v
Matrix	linear_algebra.py	/^Matrix = List[List[float]] # inner list represents a row of the matrix$/;"	v
Matrix	scratch/linear_algebra.py	/^Matrix = List[List[float]]$/;"	v
Matrix	scratch/network_analysis.py	/^from scratch.linear_algebra import Matrix, make_matrix, shape$/;"	i
Matrix	scratch/working_with_data.py	/^from scratch.linear_algebra import Matrix, Vector, make_matrix$/;"	i
Merged	scratch/clustering.py	/^class Merged(NamedTuple):$/;"	c
Message	naive_bayes.py	/^class Message(NamedTuple):$/;"	c
Message	scratch/naive_bayes.py	/^class Message(NamedTuple):$/;"	c
Momentum	scratch/deep_learning.py	/^class Momentum(Optimizer):$/;"	c
Momentum	scratch/nlp.py	/^    from scratch.deep_learning import SoftmaxCrossEntropy, Momentum, GradientDescent$/;"	i
MyStreamer	scratch/getting_data.py	/^    class MyStreamer(TwythonStreamer):$/;"	c	function:main
NUM_SENTENCES	scratch/nlp.py	/^NUM_SENTENCES = 50$/;"	v
NaiveBayesClassifier	naive_bayes.py	/^class NaiveBayesClassifier:$/;"	c
NaiveBayesClassifier	scratch/naive_bayes.py	/^class NaiveBayesClassifier:$/;"	c
NamedTuple	naive_bayes.py	/^from typing import Set, NamedTuple$/;"	i
NamedTuple	scratch/clustering.py	/^from typing import NamedTuple, Union$/;"	i
NamedTuple	scratch/decision_trees.py	/^from typing import NamedTuple, Optional$/;"	i
NamedTuple	scratch/decision_trees.py	/^from typing import NamedTuple, Union, Any$/;"	i
NamedTuple	scratch/k_nearest_neighbors.py	/^from typing import NamedTuple$/;"	i
NamedTuple	scratch/mapreduce.py	/^from typing import NamedTuple$/;"	i
NamedTuple	scratch/naive_bayes.py	/^from typing import NamedTuple$/;"	i
NamedTuple	scratch/network_analysis.py	/^from typing import NamedTuple$/;"	i
NamedTuple	scratch/recommender_systems.py	/^    from typing import NamedTuple$/;"	i
NamedTuple	scratch/working_with_data.py	/^from typing import NamedTuple$/;"	i
NoResetClicker	scratch/crash_course_in_python.py	/^class NoResetClicker(CountingClicker):$/;"	c
Number	scratch/crash_course_in_python.py	/^Number = int$/;"	v
Numbers	scratch/crash_course_in_python.py	/^Numbers = List[Number]$/;"	v
Optimizer	scratch/deep_learning.py	/^class Optimizer:$/;"	c
Optimizer	scratch/nlp_advanced.py	/^from scratch.deep_learning import Optimizer, Layer$/;"	i
Optional	scratch/crash_course_in_python.py	/^from typing import Optional$/;"	i
Optional	scratch/decision_trees.py	/^from typing import NamedTuple, Optional$/;"	i
Optional	scratch/working_with_data.py	/^from typing import Optional$/;"	i
Path	scratch/network_analysis.py	/^Path = List[int]$/;"	v
Rating	scratch/recommender_systems.py	/^    class Rating(NamedTuple):$/;"	c	function:main
Reducer	scratch/mapreduce.py	/^Reducer = Callable[[Any, Iterable], KV]$/;"	v
Relu	scratch/deep_learning.py	/^class Relu(Layer):$/;"	c
Row	scratch/databases.py	/^Row = Dict[str, Any]                        # A database row$/;"	v
SQRT_TWO_PI	scratch/probability.py	/^SQRT_TWO_PI = math.sqrt(2 * math.pi)$/;"	v
SSE	scratch/deep_learning.py	/^class SSE(Loss):$/;"	c
Sequence	scratch/databases.py	/^from typing import Tuple, Sequence, List, Any, Callable, Dict, Iterator$/;"	i
Sequential	scratch/deep_learning.py	/^class Sequential(Layer):$/;"	c
Sequential	scratch/nlp.py	/^    from scratch.deep_learning import Sequential, Linear$/;"	i
Set	naive_bayes.py	/^from typing import Set, NamedTuple$/;"	i
Set	scratch/getting_data.py	/^    from typing import Dict, Set$/;"	i
Set	scratch/naive_bayes.py	/^from typing import Set$/;"	i
Sigmoid	scratch/deep_learning.py	/^class Sigmoid(Layer):$/;"	c
SimpleRnn	scratch/nlp.py	/^class SimpleRnn(Layer):$/;"	c
SoftmaxCrossEntropy	scratch/deep_learning.py	/^class SoftmaxCrossEntropy(Loss):$/;"	c
SoftmaxCrossEntropy	scratch/nlp.py	/^    from scratch.deep_learning import SoftmaxCrossEntropy, Momentum, GradientDescent$/;"	i
Split	scratch/decision_trees.py	/^class Split(NamedTuple):$/;"	c
Stat	scratch/multiple_regression.py	/^Stat = TypeVar('Stat')  # Generic type for "statistic"$/;"	v
StockPrice	scratch/working_with_data.py	/^class StockPrice(NamedTuple):$/;"	c
T	scratch/decision_trees.py	/^T = TypeVar('T')  # generic type for inputs$/;"	v
T	scratch/gradient_descent.py	/^T = TypeVar('T')  # this allows us to type "generic" functions$/;"	v
Table	scratch/databases.py	/^class Table:$/;"	c
Tanh	scratch/deep_learning.py	/^class Tanh(Layer):$/;"	c
Tensor	scratch/deep_learning.py	/^Tensor = list$/;"	v
Tensor	scratch/nlp.py	/^    from scratch.deep_learning import Tensor, one_hot_encode$/;"	i
Tensor	scratch/nlp.py	/^from scratch.deep_learning import Layer, Tensor, random_tensor, zeros_like$/;"	i
Tensor	scratch/nlp.py	/^from scratch.deep_learning import Tensor$/;"	i
TextEmbedding	scratch/nlp.py	/^class TextEmbedding(Embedding):$/;"	c
Tuple	linear_algebra.py	/^from typing import List, Tuple, Callable$/;"	i
Tuple	naive_bayes.py	/^from typing import List, Tuple, Dict, Iterable$/;"	i
Tuple	scratch/clustering.py	/^from typing import Tuple$/;"	i
Tuple	scratch/crash_course_in_python.py	/^from typing import Dict, Iterable, Tuple$/;"	i
Tuple	scratch/databases.py	/^from typing import Tuple, Sequence, List, Any, Callable, Dict, Iterator$/;"	i
Tuple	scratch/deep_learning.py	/^from typing import Iterable, Tuple$/;"	i
Tuple	scratch/inference.py	/^from typing import Tuple$/;"	i
Tuple	scratch/k_nearest_neighbors.py	/^    from typing import Tuple$/;"	i
Tuple	scratch/linear_algebra.py	/^from typing import Tuple$/;"	i
Tuple	scratch/machine_learning.py	/^from typing import TypeVar, List, Tuple$/;"	i
Tuple	scratch/mapreduce.py	/^from typing import Callable, Iterable, Any, Tuple$/;"	i
Tuple	scratch/mapreduce.py	/^from typing import Iterator, Tuple$/;"	i
Tuple	scratch/multiple_regression.py	/^    from typing import Tuple$/;"	i
Tuple	scratch/naive_bayes.py	/^from typing import List, Tuple, Dict, Iterable$/;"	i
Tuple	scratch/network_analysis.py	/^from typing import Tuple$/;"	i
Tuple	scratch/nlp.py	/^from typing import Tuple$/;"	i
Tuple	scratch/recommender_systems.py	/^from typing import Dict, List, Tuple$/;"	i
Tuple	scratch/simple_linear_regression.py	/^from typing import Tuple$/;"	i
Tuple	scratch/working_with_data.py	/^from typing import Tuple$/;"	i
Twython	scratch/getting_data.py	/^    from twython import Twython$/;"	i
TwythonStreamer	scratch/getting_data.py	/^    from twython import TwythonStreamer$/;"	i
TypeVar	scratch/decision_trees.py	/^from typing import Dict, TypeVar$/;"	i
TypeVar	scratch/gradient_descent.py	/^from typing import TypeVar, List, Iterator$/;"	i
TypeVar	scratch/machine_learning.py	/^from typing import TypeVar, List, Tuple$/;"	i
TypeVar	scratch/multiple_regression.py	/^from typing import TypeVar, Callable$/;"	i
Union	scratch/clustering.py	/^from typing import NamedTuple, Union$/;"	i
Union	scratch/crash_course_in_python.py	/^from typing import Union$/;"	i
Union	scratch/decision_trees.py	/^from typing import NamedTuple, Union, Any$/;"	i
User	scratch/network_analysis.py	/^class User(NamedTuple):$/;"	c
Vector	linear_algebra.py	/^Vector = List[float]$/;"	v
Vector	scratch/clustering.py	/^from scratch.linear_algebra import Vector$/;"	i
Vector	scratch/crash_course_in_python.py	/^Vector = List[float]$/;"	v
Vector	scratch/gradient_descent.py	/^from scratch.linear_algebra import Vector, dot$/;"	i
Vector	scratch/k_nearest_neighbors.py	/^from scratch.linear_algebra import Vector, distance$/;"	i
Vector	scratch/linear_algebra.py	/^Vector = List[float]$/;"	v
Vector	scratch/logistic_regression.py	/^from scratch.linear_algebra import Vector, dot$/;"	i
Vector	scratch/multiple_regression.py	/^from scratch.linear_algebra import dot, Vector$/;"	i
Vector	scratch/network_analysis.py	/^from scratch.linear_algebra import Vector, dot$/;"	i
Vector	scratch/neural_networks.py	/^from scratch.linear_algebra import Vector, dot$/;"	i
Vector	scratch/nlp.py	/^from scratch.linear_algebra import dot, Vector$/;"	i
Vector	scratch/simple_linear_regression.py	/^from scratch.linear_algebra import Vector$/;"	i
Vector	scratch/working_with_data.py	/^from scratch.linear_algebra import Matrix, Vector, make_matrix$/;"	i
Vocabulary	scratch/nlp.py	/^class Vocabulary:$/;"	c
W	scratch/nlp.py	/^W = len(distinct_words)$/;"	v
WhereClause	scratch/databases.py	/^WhereClause = Callable[[Row], bool]         # Predicate for a single row$/;"	v
X	scratch/machine_learning.py	/^X = TypeVar('X')  # generic type to represent a data point$/;"	v
X	scratch/multiple_regression.py	/^X = TypeVar('X')        # Generic type for data$/;"	v
Y	scratch/machine_learning.py	/^Y = TypeVar('Y')  # generic type to represent output variables$/;"	v
__getitem__	scratch/databases.py	/^    def __getitem__(self, idx: int) -> Row:$/;"	m	class:Table	file:
__getitem__	scratch/nlp.py	/^    def __getitem__(self, word: str) -> Tensor:$/;"	m	class:TextEmbedding	file:
__init__	naive_bayes.py	/^    def __init__(self, k: float = 0.5) -> None:$/;"	m	class:NaiveBayesClassifier
__init__	scratch/clustering.py	/^    def __init__(self, k: int) -> None:$/;"	m	class:KMeans
__init__	scratch/crash_course_in_python.py	/^    def __init__(self, count = 0):$/;"	m	class:CountingClicker
__init__	scratch/databases.py	/^    def __init__(self, columns: List[str], types: List[type]) -> None:$/;"	m	class:Table
__init__	scratch/deep_learning.py	/^    def __init__(self, input_dim: int, output_dim: int, init: str = 'xavier') -> None:$/;"	m	class:Linear
__init__	scratch/deep_learning.py	/^    def __init__(self, layers: List[Layer]) -> None:$/;"	m	class:Sequential
__init__	scratch/deep_learning.py	/^    def __init__(self, learning_rate: float = 0.1) -> None:$/;"	m	class:GradientDescent
__init__	scratch/deep_learning.py	/^    def __init__(self, p: float) -> None:$/;"	m	class:Dropout
__init__	scratch/deep_learning.py	/^    def __init__(self,$/;"	m	class:Momentum
__init__	scratch/naive_bayes.py	/^    def __init__(self, k: float = 0.5) -> None:$/;"	m	class:NaiveBayesClassifier
__init__	scratch/nlp.py	/^    def __init__(self, input_dim: int, hidden_dim: int) -> None:$/;"	m	class:SimpleRnn
__init__	scratch/nlp.py	/^    def __init__(self, num_embeddings: int, embedding_dim: int) -> None:$/;"	m	class:Embedding
__init__	scratch/nlp.py	/^    def __init__(self, vocab: Vocabulary, embedding_dim: int) -> None:$/;"	m	class:TextEmbedding
__init__	scratch/nlp.py	/^    def __init__(self, words: List[str] = None) -> None:$/;"	m	class:Vocabulary
__init__	scratch/nlp_advanced.py	/^    def __init__(self, learning_rate: float) -> None:$/;"	m	class:EmbeddingOptimizer
__iter__	scratch/databases.py	/^    def __iter__(self) -> Iterator[Row]:$/;"	m	class:Table	file:
__len__	scratch/databases.py	/^    def __len__(self) -> int:$/;"	m	class:Table	file:
__repr__	scratch/crash_course_in_python.py	/^    def __repr__(self):$/;"	m	class:CountingClicker	file:
__repr__	scratch/databases.py	/^    def __repr__(self):$/;"	m	class:Table	file:
_median_even	scratch/statistics.py	/^def _median_even(xs: List[float]) -> float:$/;"	f
_median_even	stats_util.py	/^def _median_even(xs: List[float]) -> float:$/;"	f
_median_odd	scratch/statistics.py	/^def _median_odd(xs: List[float]) -> float:$/;"	f
_median_odd	stats_util.py	/^def _median_odd(xs: List[float]) -> float:$/;"	f
_negative_log_gradient	scratch/logistic_regression.py	/^def _negative_log_gradient(x: Vector, y: float, beta: Vector) -> Vector:$/;"	f
_negative_log_likelihood	scratch/logistic_regression.py	/^def _negative_log_likelihood(x: Vector, y: float, beta: Vector) -> float:$/;"	f
_negative_log_partial_j	scratch/logistic_regression.py	/^def _negative_log_partial_j(x: Vector, y: float, beta: Vector, j: int) -> float:$/;"	f
_probabilities	naive_bayes.py	/^    def _probabilities(self, token: str) -> Tuple[float, float]:$/;"	m	class:NaiveBayesClassifier
_probabilities	scratch/naive_bayes.py	/^    def _probabilities(self, token: str) -> Tuple[float, float]:$/;"	m	class:NaiveBayesClassifier
a	scratch/crash_course_in_python.py	/^from re import *    # uh oh, re has a match function$/;"	i
a_b_test_statistic	scratch/inference.py	/^def a_b_test_statistic(N_A: int, n_A: int, N_B: int, n_B: int) -> float:$/;"	f
a_to_b	scratch/working_with_data.py	/^a_to_b = distance([160, 150], [170.2, 160])    # 14.28$/;"	v
a_to_b	scratch/working_with_data.py	/^a_to_b = distance([63, 150], [67, 160])        # 10.77$/;"	v
a_to_c	scratch/working_with_data.py	/^a_to_c = distance([160, 150], [177.8, 171])    # 27.53$/;"	v
a_to_c	scratch/working_with_data.py	/^a_to_c = distance([63, 150], [70, 171])        # 22.14$/;"	v
accuracy	scratch/machine_learning.py	/^def accuracy(tp: int, fp: int, fn: int, tn: int) -> float:$/;"	f
add	scratch/crash_course_in_python.py	/^def add(a, b): return a + b$/;"	f
add	scratch/crash_course_in_python.py	/^def add(a, b):$/;"	f
add	scratch/crash_course_in_python.py	/^def add(a: int, b: int) -> int:$/;"	f
add	scratch/gradient_descent.py	/^from scratch.linear_algebra import distance, add, scalar_multiply$/;"	i
add	scratch/linear_algebra.py	/^def add(v: Vector, w: Vector) -> Vector:$/;"	f
add	scratch/multiple_regression.py	/^from scratch.linear_algebra import add$/;"	i
add	scratch/nlp.py	/^    def add(self, word: str) -> None:$/;"	m	class:Vocabulary
adjacency_matrix	scratch/network_analysis.py	/^adjacency_matrix = make_matrix(n, n, entry_fn)$/;"	v
adjectives	scratch/nlp.py	/^adjectives = ["slow", "fast", "soft", "hard"]$/;"	v
adverbs	scratch/nlp.py	/^adverbs = ["very", "quite", "extremely", ""]$/;"	v
all_changes	scratch/working_with_data.py	/^all_changes = [change$/;"	v
all_paragraphs	scratch/getting_data.py	/^all_paragraphs = soup.find_all('p')  # or just soup('p')$/;"	v
and_bias	scratch/neural_networks.py	/^and_bias = -3.$/;"	v
and_weights	scratch/neural_networks.py	/^and_weights = [2., 2]$/;"	v
another_double	scratch/crash_course_in_python.py	/^another_double = lambda x: 2 * x       # Don't do this$/;"	v
another_double	scratch/crash_course_in_python.py	/^def another_double(x):$/;"	f
apply_to_one	scratch/crash_course_in_python.py	/^def apply_to_one(f):$/;"	f
argmax	scratch/deep_learning.py	/^    from scratch.neural_networks import binary_encode, fizz_buzz_encode, argmax$/;"	i
argmax	scratch/neural_networks.py	/^def argmax(xs: list) -> int:$/;"	f
average_num_friends	scratch/databases.py	/^    def average_num_friends(rows: List[Row]) -> float:$/;"	f	function:main
average_salary_by_bucket	scratch/introduction.py	/^average_salary_by_bucket = {$/;"	v
average_salary_by_tenure	scratch/introduction.py	/^average_salary_by_tenure = {$/;"	v
avg_connections	scratch/introduction.py	/^avg_connections = total_connections \/ num_users   # 24 \/ 10 == 2.4$/;"	v
avg_daily_change	scratch/working_with_data.py	/^avg_daily_change = {$/;"	v
b_to_c	scratch/working_with_data.py	/^b_to_c = distance([170.2, 160], [177.8, 171])  # 13.37$/;"	v
b_to_c	scratch/working_with_data.py	/^b_to_c = distance([67, 160], [70, 171])        # 11.40$/;"	v
backward	scratch/deep_learning.py	/^    def backward(self, gradient):$/;"	m	class:Layer
backward	scratch/deep_learning.py	/^    def backward(self, gradient):$/;"	m	class:Sequential
backward	scratch/deep_learning.py	/^    def backward(self, gradient: Tensor) -> Tensor:$/;"	m	class:Dropout
backward	scratch/deep_learning.py	/^    def backward(self, gradient: Tensor) -> Tensor:$/;"	m	class:Linear
backward	scratch/deep_learning.py	/^    def backward(self, gradient: Tensor) -> Tensor:$/;"	m	class:Relu
backward	scratch/deep_learning.py	/^    def backward(self, gradient: Tensor) -> Tensor:$/;"	m	class:Sigmoid
backward	scratch/deep_learning.py	/^    def backward(self, gradient: Tensor) -> Tensor:$/;"	m	class:Tanh
backward	scratch/nlp.py	/^    def backward(self, gradient: Tensor) -> None:$/;"	m	class:Embedding
backward	scratch/nlp.py	/^    def backward(self, gradient: Tensor):$/;"	m	class:SimpleRnn
bernoulli_trial	scratch/probability.py	/^def bernoulli_trial(p: float) -> int:$/;"	f
best_so_far	scratch/crash_course_in_python.py	/^best_so_far = None  # what's my type?$/;"	v
beta	scratch/multiple_regression.py	/^beta = [4, 4, 4]  # so prediction = 4 + 8 + 12 = 24$/;"	v
beta_pdf	scratch/inference.py	/^def beta_pdf(x: float, alpha: float, beta: float) -> float:$/;"	f
betweenness_centrality	scratch/network_analysis.py	/^betweenness_centrality = {user.id: 0.0 for user in users}$/;"	v
bias_squared	scratch/visualization.py	/^bias_squared = [256, 128, 64, 32, 16, 8, 4, 2, 1]$/;"	v
binary_encode	scratch/deep_learning.py	/^    from scratch.neural_networks import binary_encode, fizz_buzz_encode, argmax$/;"	i
binary_encode	scratch/neural_networks.py	/^def binary_encode(x: int) -> Vector:$/;"	f
binomial	scratch/probability.py	/^def binomial(n: int, p: float) -> int:$/;"	f
binomial_histogram	scratch/probability.py	/^def binomial_histogram(p: float, n: int, num_points: int) -> None:$/;"	f
bootstrap_sample	scratch/multiple_regression.py	/^def bootstrap_sample(data: List[X]) -> List[X]:$/;"	f
bootstrap_statistic	scratch/multiple_regression.py	/^def bootstrap_statistic(data: List[X],$/;"	f
bottom_up_cluster	scratch/clustering.py	/^def bottom_up_cluster(inputs: List[Vector],$/;"	f
bucketize	scratch/working_with_data.py	/^def bucketize(point: float, bucket_size: float) -> float:$/;"	f
build_tree_id3	scratch/decision_trees.py	/^def build_tree_id3(inputs: List[Any],$/;"	f
by	scratch/introduction.py	/^from collections import Counter                   # not loaded by default$/;"	i
c	scratch/crash_course_in_python.py	/^c = Counter([0, 1, 2, 0])          # c is (basically) {0: 2, 1: 1, 2: 1}$/;"	v
capital	scratch/crash_course_in_python.py	/^from typing import List  # note capital L$/;"	i
check_vectors_size	linear_algebra.py	/^def check_vectors_size(v_list:Vector) -> bool:$/;"	f
choose_new_topic	scratch/nlp.py	/^def choose_new_topic(d: int, word: str) -> int:$/;"	f
class_probabilities	scratch/decision_trees.py	/^def class_probabilities(labels: List[Any]) -> List[float]:$/;"	f
classify	scratch/clustering.py	/^    def classify(self, input: Vector) -> int:$/;"	m	class:KMeans
classify	scratch/decision_trees.py	/^def classify(tree: DecisionTree, input: Any) -> Any:$/;"	f
click	scratch/crash_course_in_python.py	/^    def click(self, num_times = 1):$/;"	m	class:CountingClicker
clicker	scratch/crash_course_in_python.py	/^clicker = CountingClicker()$/;"	v
clicker2	scratch/crash_course_in_python.py	/^clicker2 = NoResetClicker()$/;"	v
close_to_100	scratch/multiple_regression.py	/^close_to_100 = [99.5 + random.random() for _ in range(101)]$/;"	v
closeness_centrality	scratch/network_analysis.py	/^closeness_centrality = {user.id: 1 \/ farness(user.id) for user in users}$/;"	v
closest	scratch/nlp.py	/^    def closest(self, word: str, n: int = 5) -> List[Tuple[float, str]]:$/;"	m	class:TextEmbedding
closing_price	scratch/getting_data.py	/^        closing_price = float(dict_row["closing_price"])$/;"	v
cluster_distance	scratch/clustering.py	/^def cluster_distance(cluster1: Cluster,$/;"	f
cluster_means	scratch/clustering.py	/^def cluster_means(k: int,$/;"	f
col2type	scratch/databases.py	/^    def col2type(self, col: str) -> type:$/;"	m	class:Table
colon_reader	scratch/getting_data.py	/^    colon_reader = csv.DictReader(f, delimiter=':')$/;"	v
colors	scratch/nlp.py	/^colors = ["red", "green", "blue", "yellow", "black", ""]$/;"	v
comma_repeater	scratch/crash_course_in_python.py	/^def comma_repeater(s: str, n: int) -> str:$/;"	f
compare_distributions	scratch/nlp.py	/^def compare_distributions(num_samples: int = 1000) -> Dict[int, List[int]]:$/;"	f
content	scratch/nlp.py	/^content = soup.find("div", "article-body")   # find article-body div$/;"	v
contrib	scratch/network_analysis.py	/^            contrib = 1 \/ num_paths    # contribution to centrality$/;"	v
copy_of_x	scratch/crash_course_in_python.py	/^copy_of_x = x[:]                    # [-1, 1, 2, ..., 9]$/;"	v
correlation	scratch/simple_linear_regression.py	/^from scratch.statistics import correlation, standard_deviation, mean$/;"	i
correlation	scratch/statistics.py	/^def correlation(xs: List[float], ys: List[float]) -> float:$/;"	f
correlation	scratch/working_with_data.py	/^    from scratch.statistics import correlation$/;"	i
correlation	scratch/working_with_data.py	/^from scratch.statistics import correlation$/;"	i
correlation	stats_util.py	/^def correlation(xs: List[float], ys: List[float]) -> float:$/;"	f
correlation_ij	scratch/working_with_data.py	/^    def correlation_ij(i: int, j: int) -> float:$/;"	f	function:correlation_matrix
correlation_matrix	scratch/working_with_data.py	/^def correlation_matrix(data: List[Vector]) -> Matrix:$/;"	f
cosine_similarity	scratch/nlp.py	/^def cosine_similarity(v1: Vector, v2: Vector) -> float:$/;"	f
cosine_similarity	scratch/recommender_systems.py	/^from scratch.nlp import cosine_similarity$/;"	i
count_distinct_reducer	scratch/mapreduce.py	/^count_distinct_reducer = values_reducer(lambda values: len(set(values)))$/;"	v
count_interests	scratch/databases.py	/^    def count_interests(rows: List[Row]) -> int:$/;"	f	function:main
covariance	scratch/statistics.py	/^def covariance(xs: List[float], ys: List[float]) -> float:$/;"	f
csv	scratch/getting_data.py	/^import csv$/;"	i
csv	scratch/k_nearest_neighbors.py	/^    import csv$/;"	i
csv	scratch/recommender_systems.py	/^    import csv$/;"	i
csv	scratch/working_with_data.py	/^    import csv$/;"	i
csv	scratch/working_with_data.py	/^import csv$/;"	i
csv_writer	scratch/getting_data.py	/^    csv_writer = csv.writer(f, delimiter=',')$/;"	v
daily_hours	scratch/statistics.py	/^daily_hours = [dm \/ 60 for dm in daily_minutes]$/;"	v
daily_hours_good	scratch/statistics.py	/^daily_hours_good = [dm \/ 60 for dm in daily_minutes_good]$/;"	v
daily_minutes	scratch/statistics.py	/^daily_minutes = [1,68.77,51.25,52.08,38.36,44.54,57.13,51.4,41.42,31.22,34.76,54.01,38.79,47.59,49.1,27.66,41.03,36.73,48.65,28.12,46.62,35.57,32.98,35,26.07,23.77,39.73,40.57,31.65,31.21,36.32,20.45,21.93,26.02,27.34,23.49,46.94,30.5,33.8,24.23,21.4,27.94,32.24,40.57,25.07,19.42,22.39,18.42,46.96,23.72,26.41,26.97,36.76,40.32,35.02,29.47,30.2,31,38.11,38.18,36.31,21.03,30.86,36.07,28.66,29.08,37.28,15.28,24.17,22.31,30.17,25.53,19.85,35.37,44.6,17.23,13.47,26.33,35.02,32.09,24.81,19.33,28.77,24.26,31.98,25.73,24.86,16.28,34.51,15.23,39.72,40.8,26.06,35.76,34.76,16.13,44.04,18.03,19.65,32.62,35.59,39.43,14.18,35.24,40.13,41.82,35.45,36.07,43.67,24.61,20.9,21.9,18.79,27.61,27.21,26.61,29.77,20.59,27.53,13.82,33.2,25,33.1,36.65,18.63,14.87,22.2,36.81,25.53,24.62,26.25,18.21,28.08,19.42,29.79,32.8,35.99,28.32,27.79,35.88,29.06,36.28,14.1,36.63,37.49,26.9,18.58,38.48,24.48,18.95,33.55,14.24,29.04,32.51,25.63,22.22,19,32.73,15.16,13.9,27.2,32.01,29.27,33,13.74,20.42,27.32,18.23,35.35,28.48,9.08,24.62,20.12,35.26,19.92,31.02,16.49,12.16,30.7,31.22,34.65,13.13,27.51,33.2,31.57,14.1,33.42,17.44,10.12,24.42,9.82,23.39,30.93,15.03,21.67,31.09,33.29,22.61,26.89,23.48,8.38,27.81,32.35,23.84]$/;"	v
daily_minutes_good	scratch/multiple_regression.py	/^    from scratch.statistics import daily_minutes_good$/;"	i
daily_minutes_good	scratch/multiple_regression.py	/^from scratch.statistics import daily_minutes_good$/;"	i
daily_minutes_good	scratch/simple_linear_regression.py	/^from scratch.statistics import num_friends_good, daily_minutes_good$/;"	i
daily_minutes_good	scratch/statistics.py	/^daily_minutes_good = [x$/;"	v
data	scratch/crash_course_in_python.py	/^data = natural_numbers()$/;"	v
data	scratch/linear_algebra.py	/^data = [[70, 170, 40],$/;"	v
data	scratch/logistic_regression.py	/^data = [list(row) for row in tuples]$/;"	v
data	scratch/machine_learning.py	/^data = [n for n in range(1000)]$/;"	v
data	scratch/nlp.py	/^data = [ ("big data", 100, 15), ("Hadoop", 95, 25), ("Python", 75, 50),$/;"	v
data	scratch/working_with_data.py	/^data = [sp for sp in maybe_data if sp is not None]$/;"	v
data_entropy	scratch/decision_trees.py	/^def data_entropy(labels: List[Any]) -> float:$/;"	f
data_range	scratch/statistics.py	/^def data_range(xs: List[float]) -> float:$/;"	f
data_range	stats_util.py	/^def data_range(xs: List[float]) -> float:$/;"	f
data_science_day_mapper	scratch/mapreduce.py	/^    def data_science_day_mapper(status_update: dict) -> Iterable:$/;"	f	function:main
data_scientists_who_like	scratch/introduction.py	/^def data_scientists_who_like(target_interest):$/;"	f
date	scratch/getting_data.py	/^        date = dict_row["date"]$/;"	v
datetime	scratch/mapreduce.py	/^    import datetime$/;"	i
datetime	scratch/multiple_regression.py	/^    import datetime$/;"	i
datetime	scratch/working_with_data.py	/^import datetime$/;"	i
day_over_day_changes	scratch/working_with_data.py	/^def day_over_day_changes(prices: List[StockPrice]) -> List[DailyChange]:$/;"	f
dbg	common_import.py	/^from IPython.core import debugger as dbg/;"	i
dbg	stats_util.py	/^from IPython.core import debugger as dbg$/;"	i
dd_dict	scratch/crash_course_in_python.py	/^dd_dict = defaultdict(dict)             # dict() produces an empty dict$/;"	v
dd_list	scratch/crash_course_in_python.py	/^dd_list = defaultdict(list)             # list() produces an empty list$/;"	v
dd_pair	scratch/crash_course_in_python.py	/^dd_pair = defaultdict(lambda: [0, 0])$/;"	v
de_mean	scratch/simple_linear_regression.py	/^from scratch.statistics import de_mean$/;"	i
de_mean	scratch/statistics.py	/^def de_mean(xs: List[float]) -> List[float]:$/;"	f
de_mean	scratch/working_with_data.py	/^def de_mean(data: List[Vector]) -> List[Vector]:$/;"	f
de_mean	stats_util.py	/^def de_mean(xs: List[float]) -> List[float]:$/;"	f
default	scratch/introduction.py	/^from collections import Counter                   # not loaded by default$/;"	i
defaultdict	naive_bayes.py	/^from collections import defaultdict$/;"	i
defaultdict	scratch/crash_course_in_python.py	/^from collections import defaultdict$/;"	i
defaultdict	scratch/crash_course_in_python.py	/^from collections import defaultdict, Counter$/;"	i
defaultdict	scratch/databases.py	/^from collections import defaultdict$/;"	i
defaultdict	scratch/decision_trees.py	/^from collections import defaultdict$/;"	i
defaultdict	scratch/introduction.py	/^from collections import defaultdict$/;"	i
defaultdict	scratch/k_nearest_neighbors.py	/^    from collections import defaultdict$/;"	i
defaultdict	scratch/mapreduce.py	/^from collections import defaultdict$/;"	i
defaultdict	scratch/naive_bayes.py	/^from collections import defaultdict$/;"	i
defaultdict	scratch/nlp.py	/^from collections import defaultdict$/;"	i
defaultdict	scratch/recommender_systems.py	/^from collections import defaultdict$/;"	i
defaultdict	scratch/working_with_data.py	/^from collections import defaultdict$/;"	i
delete	scratch/databases.py	/^    def delete(self, predicate: WhereClause = lambda row: True) -> None:$/;"	m	class:Table
deque	scratch/network_analysis.py	/^from collections import deque$/;"	i
derivative	scratch/gradient_descent.py	/^def derivative(x: float) -> float:$/;"	f
deserialized	scratch/getting_data.py	/^deserialized = json.loads(serialized)$/;"	v
difference_quotient	scratch/gradient_descent.py	/^def difference_quotient(f: Callable[[float], float],$/;"	f
direct_sample	scratch/nlp.py	/^def direct_sample() -> Tuple[int, int]:$/;"	f
direction	scratch/working_with_data.py	/^def direction(w: Vector) -> Vector:$/;"	f
directional_variance	scratch/working_with_data.py	/^def directional_variance(data: List[Vector], w: Vector) -> float:$/;"	f
directional_variance_gradient	scratch/working_with_data.py	/^def directional_variance_gradient(data: List[Vector], w: Vector) -> Vector:$/;"	f
distance	linear_algebra.py	/^def distance(v: Vector, w: Vector) -> float:$/;"	f
distance	scratch/clustering.py	/^from scratch.linear_algebra import distance$/;"	i
distance	scratch/gradient_descent.py	/^from scratch.linear_algebra import distance, add, scalar_multiply$/;"	i
distance	scratch/k_nearest_neighbors.py	/^from scratch.linear_algebra import Vector, distance$/;"	i
distance	scratch/linear_algebra.py	/^def distance(v: Vector, w: Vector) -> float:  # type: ignore$/;"	f
distance	scratch/linear_algebra.py	/^def distance(v: Vector, w: Vector) -> float:$/;"	f
distance	scratch/network_analysis.py	/^from scratch.linear_algebra import magnitude, distance$/;"	i
distance	scratch/working_with_data.py	/^from scratch.linear_algebra import distance$/;"	i
distinct_item_list	scratch/crash_course_in_python.py	/^distinct_item_list = list(item_set)       # [1, 2, 3]$/;"	v
distinct_words	scratch/nlp.py	/^distinct_words = set(word for document in documents for word in document)$/;"	v
document	scratch/crash_course_in_python.py	/^document = ["data", "science", "from", "scratch"]$/;"	v
document	scratch/nlp.py	/^document = []$/;"	v
document_lengths	scratch/nlp.py	/^document_lengths = [len(document) for document in documents]$/;"	v
document_topic_counts	scratch/nlp.py	/^document_topic_counts = [Counter() for _ in documents]$/;"	v
document_topics	scratch/nlp.py	/^document_topics = [[random.randrange(K) for word in document]$/;"	v
documents	scratch/nlp.py	/^documents = [$/;"	v
dot	linear_algebra.py	/^ def dot(v: Vector, w: Vector) -> float:$/;"	f
dot	scratch/deep_learning.py	/^from scratch.linear_algebra import dot$/;"	i
dot	scratch/gradient_descent.py	/^from scratch.linear_algebra import Vector, dot$/;"	i
dot	scratch/linear_algebra.py	/^def dot(v: Vector, w: Vector) -> float:$/;"	f
dot	scratch/logistic_regression.py	/^from scratch.linear_algebra import Vector, dot$/;"	i
dot	scratch/multiple_regression.py	/^from scratch.linear_algebra import dot, Vector$/;"	i
dot	scratch/network_analysis.py	/^from scratch.linear_algebra import Vector, dot$/;"	i
dot	scratch/neural_networks.py	/^from scratch.linear_algebra import Vector, dot$/;"	i
dot	scratch/nlp.py	/^from scratch.linear_algebra import dot, Vector$/;"	i
dot	scratch/recommender_systems.py	/^    from scratch.linear_algebra import dot$/;"	i
dot	scratch/statistics.py	/^from scratch.linear_algebra import dot$/;"	i
dot	scratch/working_with_data.py	/^from scratch.linear_algebra import dot$/;"	i
dot_product	scratch/crash_course_in_python.py	/^def dot_product(x, y): ...$/;"	f
dot_product	scratch/crash_course_in_python.py	/^def dot_product(x: Vector, y: Vector) -> float: ...$/;"	f
double	scratch/crash_course_in_python.py	/^def double(x):$/;"	f
double_quoted_string	scratch/crash_course_in_python.py	/^double_quoted_string = "data science"$/;"	v
doubler	scratch/crash_course_in_python.py	/^def doubler(f):$/;"	f
doubler_correct	scratch/crash_course_in_python.py	/^def doubler_correct(f):$/;"	f
draws	scratch/nlp.py	/^draws = Counter(sample_from([0.1, 0.1, 0.8]) for _ in range(1000))$/;"	v
drop_final_s	scratch/naive_bayes.py	/^def drop_final_s(word):$/;"	f
easier_to_read_list_of_lists	scratch/crash_course_in_python.py	/^easier_to_read_list_of_lists = [[1, 2, 3],$/;"	v
edgecolor	scratch/visualization.py	/^        edgecolor=(0, 0, 0))                # Black edges for each bar$/;"	v
eight	scratch/crash_course_in_python.py	/^eight = x[-2]        # equals 8, 'Pythonic' for next-to-last element$/;"	v
empty_dict	scratch/crash_course_in_python.py	/^empty_dict = {}                     # Pythonic$/;"	v
empty_dict2	scratch/crash_course_in_python.py	/^empty_dict2 = dict()                # less Pythonic$/;"	v
endorsement_counts	scratch/network_analysis.py	/^endorsement_counts = Counter(target for source, target in endorsements)$/;"	v
endorsements	scratch/network_analysis.py	/^endorsements = [(0, 1), (1, 0), (0, 2), (2, 0), (1, 2),$/;"	v
enough_friends	scratch/databases.py	/^    def enough_friends(rows: List[Row]) -> bool:$/;"	f	function:main
entropy	scratch/decision_trees.py	/^def entropy(class_probabilities: List[float]) -> float:$/;"	f
entry_fn	scratch/network_analysis.py	/^    def entry_fn(i: int, j: int) -> float:$/;"	f	function:matrix_times_matrix
entry_fn	scratch/network_analysis.py	/^def entry_fn(i: int, j: int):$/;"	f
enum	scratch/probability.py	/^    import enum, random$/;"	i
error	scratch/multiple_regression.py	/^def error(x: Vector, y: float, beta: Vector) -> float:$/;"	f
error	scratch/simple_linear_regression.py	/^def error(alpha: float, beta: float, x_i: float, y_i: float) -> float:$/;"	f
estimate_gradient	scratch/gradient_descent.py	/^def estimate_gradient(f: Callable[[Vector], float],$/;"	f
estimate_sample_beta	scratch/multiple_regression.py	/^    def estimate_sample_beta(pairs: List[Tuple[Vector, float]]):$/;"	f	function:main
estimated_parameters	scratch/inference.py	/^def estimated_parameters(N: int, n: int) -> Tuple[float, float]:$/;"	f
even_numbers	scratch/crash_course_in_python.py	/^even_numbers = [x for x in range(5) if x % 2 == 0]  # [0, 2, 4]$/;"	v
even_squares	scratch/crash_course_in_python.py	/^even_squares = (x ** 2 for x in evens)$/;"	v
even_squares	scratch/crash_course_in_python.py	/^even_squares = [x * x for x in even_numbers]        # [0, 4, 16]$/;"	v
even_squares_ending_in_six	scratch/crash_course_in_python.py	/^even_squares_ending_in_six = (x for x in even_squares if x % 10 == 6)$/;"	v
evens	scratch/crash_course_in_python.py	/^evens = (x for x in data if x % 2 == 0)$/;"	v
evens_below_20	scratch/crash_course_in_python.py	/^evens_below_20 = (i for i in generate_range(20) if i % 2 == 0)$/;"	v
every_third	scratch/crash_course_in_python.py	/^every_third = x[::3]                 # [-1, 3, 6, 9]$/;"	v
expand	scratch/nlp.py	/^def expand(grammar: Grammar, tokens: List[str]) -> List[str]:$/;"	f
experiments	scratch/inference.py	/^experiments = [run_experiment() for _ in range(1000)]$/;"	v
extreme_value_count	scratch/inference.py	/^extreme_value_count = 0$/;"	v
f1	scratch/crash_course_in_python.py	/^def f1(x):$/;"	f
f1_score	scratch/machine_learning.py	/^def f1_score(tp: int, fp: int, fn: int, tn: int) -> float:$/;"	f
f2	scratch/crash_course_in_python.py	/^def f2(x, y):$/;"	f
far_from_100	scratch/multiple_regression.py	/^far_from_100 = ([99.5 + random.random()] +$/;"	v
farness	scratch/network_analysis.py	/^def farness(user_id: int) -> float:$/;"	f
feed_forward	scratch/neural_networks.py	/^def feed_forward(neural_network: List[List[Vector]],$/;"	f
find_eigenvector	scratch/network_analysis.py	/^def find_eigenvector(m: Matrix,$/;"	f
first_char	scratch/crash_course_in_python.py	/^    first_char = ""$/;"	v
first_char	scratch/crash_course_in_python.py	/^first_char = s and s[0]$/;"	v
first_letter_of_name	scratch/databases.py	/^    def first_letter_of_name(row: Row) -> str:$/;"	f	function:main
first_name	scratch/crash_course_in_python.py	/^first_name = "Joel"$/;"	v
first_paragraph	scratch/getting_data.py	/^first_paragraph = soup.find('p')        # or just soup.p$/;"	v
first_paragraph_id	scratch/getting_data.py	/^first_paragraph_id = soup.p['id']       # raises KeyError if no 'id'$/;"	v
first_paragraph_id2	scratch/getting_data.py	/^first_paragraph_id2 = soup.p.get('id')  # returns None if no 'id'$/;"	v
first_paragraph_text	scratch/getting_data.py	/^first_paragraph_text = soup.p.text$/;"	v
first_paragraph_words	scratch/getting_data.py	/^first_paragraph_words = soup.p.text.split()$/;"	v
first_principal_component	scratch/working_with_data.py	/^def first_principal_component(data: List[Vector],$/;"	f
first_three	scratch/crash_course_in_python.py	/^first_three = x[:3]                 # [-1, 1, 2]$/;"	v
five_to_three	scratch/crash_course_in_python.py	/^five_to_three = x[5:2:-1]            # [5, 4, 3]$/;"	v
fix_unicode	scratch/nlp.py	/^def fix_unicode(text: str) -> str:$/;"	f
fizz_buzz_encode	scratch/deep_learning.py	/^    from scratch.neural_networks import binary_encode, fizz_buzz_encode, argmax$/;"	i
fizz_buzz_encode	scratch/neural_networks.py	/^def fizz_buzz_encode(x: int) -> Vector:$/;"	f
fizzbuzz_accuracy	scratch/deep_learning.py	/^    def fizzbuzz_accuracy(low: int, hi: int, net: Layer) -> float:$/;"	f	function:main
flip	scratch/network_analysis.py	/^flip = [[0, 1],$/;"	v
foaf_ids_bad	scratch/introduction.py	/^def foaf_ids_bad(user):$/;"	f
forward	scratch/deep_learning.py	/^    def forward(self, input):$/;"	m	class:Layer
forward	scratch/deep_learning.py	/^    def forward(self, input):$/;"	m	class:Sequential
forward	scratch/deep_learning.py	/^    def forward(self, input: Tensor) -> Tensor:$/;"	m	class:Dropout
forward	scratch/deep_learning.py	/^    def forward(self, input: Tensor) -> Tensor:$/;"	m	class:Linear
forward	scratch/deep_learning.py	/^    def forward(self, input: Tensor) -> Tensor:$/;"	m	class:Relu
forward	scratch/deep_learning.py	/^    def forward(self, input: Tensor) -> Tensor:$/;"	m	class:Sigmoid
forward	scratch/deep_learning.py	/^    def forward(self, input: Tensor) -> Tensor:$/;"	m	class:Tanh
forward	scratch/nlp.py	/^    def forward(self, input: Tensor) -> Tensor:$/;"	m	class:SimpleRnn
forward	scratch/nlp.py	/^    def forward(self, input_id: int) -> Tensor:$/;"	m	class:Embedding
four_uniform_randoms	scratch/crash_course_in_python.py	/^four_uniform_randoms = [random.random() for _ in range(4)]$/;"	v
four_with_replacement	scratch/crash_course_in_python.py	/^four_with_replacement = [random.choice(range(10)) for _ in range(4)]$/;"	v
friend_counts	scratch/statistics.py	/^friend_counts = Counter(num_friends)$/;"	v
friend_matrix	scratch/linear_algebra.py	/^friend_matrix = [[0, 1, 1, 0, 0, 0, 0, 0, 0, 0],  # user 0$/;"	v
friend_pairs	scratch/network_analysis.py	/^friend_pairs = [(0, 1), (0, 2), (1, 2), (1, 3), (2, 3), (3, 4),$/;"	v
friends	scratch/visualization.py	/^friends = [ 70,  65,  72,  63,  71,  64,  60,  64,  67]$/;"	v
friends_of_five	scratch/linear_algebra.py	/^friends_of_five = [i$/;"	v
friends_of_friends	scratch/introduction.py	/^def friends_of_friends(user):$/;"	f
friendship_pairs	friendship.py	/^friendship_pairs = [(0, 1), (0, 2), (1, 2), (1, 3), (2, 3), (3, 4),$/;"	v
friendship_pairs	scratch/introduction.py	/^friendship_pairs = [(0, 1), (0, 2), (1, 2), (1, 3), (2, 3), (3, 4),$/;"	v
friendships	scratch/introduction.py	/^friendships = {user["id"]: [] for user in users}$/;"	v
friendships	scratch/linear_algebra.py	/^friendships = [(0, 1), (0, 2), (1, 2), (1, 3), (2, 3), (3, 4),$/;"	v
full_name	scratch/crash_course_in_python.py	/^def full_name(first = "What's-his-name", last = "Something"):$/;"	f
full_name1	scratch/crash_course_in_python.py	/^full_name1 = first_name + " " + last_name             # string addition$/;"	v
full_name2	scratch/crash_course_in_python.py	/^full_name2 = "{0} {1}".format(first_name, last_name)  # string.format$/;"	v
full_name3	scratch/crash_course_in_python.py	/^full_name3 = f"{first_name} {last_name}"$/;"	v
function	scratch/crash_course_in_python.py	/^from re import *    # uh oh, re has a match function$/;"	i
g	scratch/crash_course_in_python.py	/^    def g(*args, **kwargs):$/;"	f	function:doubler_correct
g	scratch/crash_course_in_python.py	/^    def g(x):$/;"	f	function:doubler
g	scratch/crash_course_in_python.py	/^g = doubler(f1)$/;"	v
g	scratch/crash_course_in_python.py	/^g = doubler(f2)$/;"	v
g	scratch/crash_course_in_python.py	/^g = doubler_correct(f2)$/;"	v
gdp	scratch/visualization.py	/^gdp = [300.2, 543.3, 1075.9, 2862.5, 5979.6, 10289.7, 14958.3]$/;"	v
generate	scratch/nlp.py	/^    def generate(seed: str = START, max_len: int = 50) -> str:$/;"	f	function:main
generate_clusters	scratch/clustering.py	/^def generate_clusters(base_cluster: Cluster,$/;"	f
generate_range	scratch/crash_course_in_python.py	/^def generate_range(n):$/;"	f
generate_sentence	scratch/nlp.py	/^def generate_sentence(grammar: Grammar) -> List[str]:$/;"	f
generate_using_bigrams	scratch/nlp.py	/^def generate_using_bigrams() -> str:$/;"	f
generate_using_trigrams	scratch/nlp.py	/^def generate_using_trigrams() -> str:$/;"	f
get_children	scratch/clustering.py	/^def get_children(cluster: Cluster):$/;"	f
get_column	linear_algebra.py	/^def get_column(A: Matrix, j: int) -> Vector:$/;"	f
get_column	scratch/linear_algebra.py	/^def get_column(A: Matrix, j: int) -> Vector:$/;"	f
get_data_electric_production_raw	data_prep_util.py	/^def get_data_electric_production_raw():$/;"	f
get_domain	scratch/getting_data.py	/^def get_domain(email_address: str) -> str:$/;"	f
get_friends	linear_algebra.py	/^def get_friends(friends_matrix,row):$/;"	f
get_friendships	friendship.py	/^def get_friendships():$/;"	f
get_id	scratch/nlp.py	/^    def get_id(self, word: str) -> int:$/;"	m	class:Vocabulary
get_merge_order	scratch/clustering.py	/^def get_merge_order(cluster: Cluster) -> float:$/;"	f
get_row	linear_algebra.py	/^def get_row(A: Matrix, i: int) -> Vector:$/;"	f
get_row	scratch/linear_algebra.py	/^def get_row(A: Matrix, i: int) -> Vector:$/;"	f
get_values	scratch/clustering.py	/^def get_values(cluster: Cluster) -> List[Vector]:$/;"	f
get_word	scratch/nlp.py	/^    def get_word(self, word_id: int) -> str:$/;"	m	class:Vocabulary
gibbs_sample	scratch/nlp.py	/^def gibbs_sample(num_iters: int = 100) -> Tuple[int, int]:$/;"	f
glob	scratch/naive_bayes.py	/^    import glob, re$/;"	i
grades	scratch/crash_course_in_python.py	/^grades = {"Joel": 80, "Tim": 95}    # dictionary literal$/;"	v
grades	scratch/linear_algebra.py	/^grades = [95,   # exam1$/;"	v
grades	scratch/visualization.py	/^grades = [83, 95, 91, 87, 70, 0, 85, 82, 100, 67, 73, 77, 0]$/;"	v
gradient	scratch/deep_learning.py	/^    def gradient(self, predicted: Tensor, actual: Tensor) -> Tensor:$/;"	m	class:Loss
gradient	scratch/deep_learning.py	/^    def gradient(self, predicted: Tensor, actual: Tensor) -> Tensor:$/;"	m	class:SSE
gradient	scratch/deep_learning.py	/^    def gradient(self, predicted: Tensor, actual: Tensor) -> Tensor:$/;"	m	class:SoftmaxCrossEntropy
gradient_step	scratch/gradient_descent.py	/^def gradient_step(v: Vector, gradient: Vector, step_size: float) -> Vector:$/;"	f
gradient_step	scratch/logistic_regression.py	/^    from scratch.gradient_descent import gradient_step$/;"	i
gradient_step	scratch/multiple_regression.py	/^    from scratch.gradient_descent import gradient_step$/;"	i
gradient_step	scratch/multiple_regression.py	/^from scratch.gradient_descent import gradient_step$/;"	i
gradient_step	scratch/neural_networks.py	/^    from scratch.gradient_descent import gradient_step$/;"	i
gradient_step	scratch/simple_linear_regression.py	/^    from scratch.gradient_descent import gradient_step$/;"	i
gradient_step	scratch/working_with_data.py	/^from scratch.gradient_descent import gradient_step$/;"	i
grads	scratch/deep_learning.py	/^    def grads(self) -> Iterable[Tensor]:$/;"	m	class:Layer
grads	scratch/deep_learning.py	/^    def grads(self) -> Iterable[Tensor]:$/;"	m	class:Linear
grads	scratch/deep_learning.py	/^    def grads(self) -> Iterable[Tensor]:$/;"	m	class:Sequential
grads	scratch/nlp.py	/^    def grads(self) -> Iterable[Tensor]:$/;"	m	class:Embedding
grads	scratch/nlp.py	/^    def grads(self) -> Iterable[Tensor]:$/;"	m	class:SimpleRnn
grammar	scratch/nlp.py	/^grammar = {$/;"	v
group_by	scratch/databases.py	/^    def group_by(self,$/;"	m	class:Table
has	scratch/crash_course_in_python.py	/^from re import *    # uh oh, re has a match function$/;"	i
height_weight_age	scratch/linear_algebra.py	/^height_weight_age = [70,  # inches,$/;"	v
heterogeneous_list	scratch/crash_course_in_python.py	/^heterogeneous_list = ["string", 0.1, True]$/;"	v
hi	scratch/inference.py	/^hi = normal_upper_bound(0.95, mu_0, sigma_0)$/;"	v
hiring_tree	scratch/decision_trees.py	/^hiring_tree = Split('level', {   # First, consider "level".$/;"	v
histogram	scratch/visualization.py	/^histogram = Counter(min(grade \/\/ 10 * 10, 90) for grade in grades)$/;"	v
html	scratch/getting_data.py	/^html = requests.get(url).text$/;"	v
html	scratch/nlp.py	/^html = requests.get(url).text$/;"	v
hundreds_of_other_words	scratch/crash_course_in_python.py	/^hundreds_of_other_words = []  # required for the below code to run$/;"	v
i	scratch/crash_course_in_python.py	/^i = 0$/;"	v
ibs0	scratch/recommender_systems.py	/^ibs0 = item_based_suggestions(0)$/;"	v
identity_matrix	linear_algebra.py	/^def identity_matrix(n: int) -> Matrix:$/;"	f
identity_matrix	scratch/linear_algebra.py	/^def identity_matrix(n: int) -> Matrix:$/;"	f
important_paragraphs	scratch/getting_data.py	/^important_paragraphs = soup('p', {'class' : 'important'})$/;"	v
important_paragraphs2	scratch/getting_data.py	/^important_paragraphs2 = soup('p', 'important')$/;"	v
important_paragraphs3	scratch/getting_data.py	/^important_paragraphs3 = [p for p in soup('p')$/;"	v
increasing_pairs	scratch/crash_course_in_python.py	/^increasing_pairs = [(x, y)                       # only pairs with x < y,$/;"	v
inputs	scratch/decision_trees.py	/^inputs = [Candidate('Senior', 'Java',   False, False, False),$/;"	v
inputs	scratch/gradient_descent.py	/^inputs = [(x, 20 * x + 5) for x in range(-50, 50)]$/;"	v
insert	scratch/databases.py	/^    def insert(self, values: list) -> None:$/;"	m	class:Table
integer_list	scratch/crash_course_in_python.py	/^integer_list = [1, 2, 3]$/;"	v
interest_similarities	scratch/recommender_systems.py	/^interest_similarities = [[cosine_similarity(user_vector_i, user_vector_j)$/;"	v
interest_user_matrix	scratch/recommender_systems.py	/^interest_user_matrix = [[user_interest_vector[j]$/;"	v
interests	friendship.py	/^interests = [$/;"	v
interests	scratch/introduction.py	/^interests = [$/;"	v
interests_by_user_id	scratch/introduction.py	/^interests_by_user_id = defaultdict(list)$/;"	v
interquartile_range	scratch/statistics.py	/^def interquartile_range(xs: List[float]) -> float:$/;"	f
interquartile_range	stats_util.py	/^def interquartile_range(xs: List[float]) -> float:$/;"	f
inverse_normal_cdf	scratch/deep_learning.py	/^from scratch.probability import inverse_normal_cdf$/;"	i
inverse_normal_cdf	scratch/inference.py	/^from scratch.probability import inverse_normal_cdf$/;"	i
inverse_normal_cdf	scratch/probability.py	/^def inverse_normal_cdf(p: float,$/;"	f
inverse_normal_cdf	scratch/working_with_data.py	/^    from scratch.probability import inverse_normal_cdf$/;"	i
inverse_normal_cdf	scratch/working_with_data.py	/^from scratch.probability import inverse_normal_cdf$/;"	i
is_1d	scratch/deep_learning.py	/^def is_1d(tensor: Tensor) -> bool:$/;"	f
is_high_tech	scratch/working_with_data.py	/^    def is_high_tech(self) -> bool:$/;"	m	class:StockPrice
is_join	scratch/databases.py	/^            def is_join(other_row):$/;"	f	function:Table.join
is_terminal	scratch/nlp.py	/^def is_terminal(token: str) -> bool:$/;"	f
item_based_suggestions	scratch/recommender_systems.py	/^def item_based_suggestions(user_id: int,$/;"	f
item_list	scratch/crash_course_in_python.py	/^item_list = [1, 2, 3, 1, 2, 3]$/;"	v
item_set	scratch/crash_course_in_python.py	/^item_set = set(item_list)                 # {1, 2, 3}$/;"	v
itertools	scratch/clustering.py	/^import itertools$/;"	i
joel_has_grade	scratch/crash_course_in_python.py	/^joel_has_grade = "Joel" in grades     # True$/;"	v
joels_grade	scratch/crash_course_in_python.py	/^joels_grade = grades.get("Joel", 0)   # equals 80$/;"	v
joels_grade	scratch/crash_course_in_python.py	/^joels_grade = grades["Joel"]        # equals 80$/;"	v
join	scratch/databases.py	/^    def join(self, other_table: 'Table', left_join: bool = False) -> 'Table':$/;"	m	class:Table
json	scratch/deep_learning.py	/^import json$/;"	i
json	scratch/getting_data.py	/^    import requests, json$/;"	i
json	scratch/getting_data.py	/^import json$/;"	i
json	scratch/nlp.py	/^import json$/;"	i
kate_has_grade	scratch/crash_course_in_python.py	/^kate_has_grade = "Kate" in grades     # False$/;"	v
kates_grade	scratch/crash_course_in_python.py	/^kates_grade = grades.get("Kate", 0)   # equals 0$/;"	v
key	scratch/crash_course_in_python.py	/^            key=lambda word_and_count: word_and_count[1],$/;"	v
key	scratch/introduction.py	/^       key=lambda id_and_friends: id_and_friends[1],   # by num_friends$/;"	v
knn_classify	scratch/k_nearest_neighbors.py	/^def knn_classify(k: int,$/;"	f
labels	scratch/visualization.py	/^labels =  ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i']$/;"	v
labelsize	common_import_seaborn.py	/^    labelsize="large",$/;"	v
labelweight	common_import_seaborn.py	/^    labelweight="bold",$/;"	v
largest_value	scratch/statistics.py	/^largest_value = max(num_friends)            # 100$/;"	v
lasso_penalty	scratch/multiple_regression.py	/^def lasso_penalty(beta, alpha):$/;"	f
last_name	scratch/crash_course_in_python.py	/^last_name = "Grus"$/;"	v
last_three	scratch/crash_course_in_python.py	/^last_three = x[-3:]                 # [7, 8, 9]$/;"	v
lazy	scratch/crash_course_in_python.py	/^lazy = True$/;"	v
leaf1	scratch/clustering.py	/^leaf1 = Leaf([10,  20])$/;"	v
leaf2	scratch/clustering.py	/^leaf2 = Leaf([30, -15])$/;"	v
learning_rate	scratch/multiple_regression.py	/^learning_rate = 0.001$/;"	v
least_squares_fit	scratch/logistic_regression.py	/^    from scratch.multiple_regression import least_squares_fit, predict$/;"	i
least_squares_fit	scratch/multiple_regression.py	/^def least_squares_fit(xs: List[Vector],$/;"	f
least_squares_fit	scratch/simple_linear_regression.py	/^def least_squares_fit(x: Vector, y: Vector) -> Tuple[float, float]:$/;"	f
least_squares_fit_ridge	scratch/multiple_regression.py	/^def least_squares_fit_ridge(xs: List[Vector],$/;"	f
length	scratch/databases.py	/^    def length(rows) -> int:$/;"	f	function:main
liker_mapper	scratch/mapreduce.py	/^    def liker_mapper(status_update: dict):$/;"	f	function:main
limit	scratch/databases.py	/^    def limit(self, num_rows: int) -> 'Table':$/;"	m	class:Table
linear_gradient	scratch/gradient_descent.py	/^def linear_gradient(x: float, y: float, theta: Vector) -> Vector:$/;"	f
list1	scratch/crash_course_in_python.py	/^list1 = ['a', 'b', 'c']$/;"	v
list2	scratch/crash_course_in_python.py	/^list2 = [1, 2, 3]$/;"	v
list_length	scratch/crash_course_in_python.py	/^list_length = len(integer_list)     # equals 3$/;"	v
list_of_lists	scratch/crash_course_in_python.py	/^list_of_lists = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]$/;"	v
list_of_lists	scratch/crash_course_in_python.py	/^list_of_lists = [integer_list, heterogeneous_list, []]$/;"	v
list_sum	scratch/crash_course_in_python.py	/^list_sum    = sum(integer_list)     # equals 6$/;"	v
load_vocab	scratch/nlp.py	/^def load_vocab(filename: str) -> Vocabulary:$/;"	f
load_weights	scratch/deep_learning.py	/^def load_weights(model: Layer, filename: str) -> None:$/;"	f
loaded	scratch/introduction.py	/^from collections import Counter                   # not loaded by default$/;"	i
logistic	scratch/logistic_regression.py	/^def logistic(x: float) -> float:$/;"	f
logistic_prime	scratch/logistic_regression.py	/^def logistic_prime(x: float) -> float:$/;"	f
long_winded_computation	scratch/crash_course_in_python.py	/^long_winded_computation = (1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 +$/;"	v
lookup	scratch/crash_course_in_python.py	/^lookup = defaultdict(int)$/;"	v
loop	scratch/deep_learning.py	/^    def loop(model: Layer,$/;"	f	function:main
loop	scratch/recommender_systems.py	/^    def loop(dataset: List[Rating],$/;"	f	function:main
loss	scratch/deep_learning.py	/^    def loss(self, predicted: Tensor, actual: Tensor) -> float:$/;"	m	class:Loss
loss	scratch/deep_learning.py	/^    def loss(self, predicted: Tensor, actual: Tensor) -> float:$/;"	m	class:SSE
loss	scratch/deep_learning.py	/^    def loss(self, predicted: Tensor, actual: Tensor) -> float:$/;"	m	class:SoftmaxCrossEntropy
lottery_numbers	scratch/crash_course_in_python.py	/^lottery_numbers = range(60)$/;"	v
lower_p_value	scratch/inference.py	/^lower_p_value = normal_probability_below$/;"	v
magic	scratch/crash_course_in_python.py	/^def magic(*args, **kwargs):$/;"	f
magnitude	linear_algebra.py	/^def magnitude(v: Vector) -> float:$/;"	f
magnitude	scratch/linear_algebra.py	/^def magnitude(v: Vector) -> float:$/;"	f
magnitude	scratch/network_analysis.py	/^from scratch.linear_algebra import magnitude, distance$/;"	i
magnitude	scratch/working_with_data.py	/^from scratch.linear_algebra import magnitude$/;"	i
main	scratch/clustering.py	/^def main():$/;"	f
main	scratch/databases.py	/^def main():$/;"	f
main	scratch/deep_learning.py	/^def main():$/;"	f
main	scratch/getting_data.py	/^def main():$/;"	f
main	scratch/gradient_descent.py	/^def main():$/;"	f
main	scratch/k_nearest_neighbors.py	/^def main():$/;"	f
main	scratch/logistic_regression.py	/^def main():$/;"	f
main	scratch/mapreduce.py	/^def main():$/;"	f
main	scratch/multiple_regression.py	/^def main():$/;"	f
main	scratch/naive_bayes.py	/^def main():$/;"	f
main	scratch/neural_networks.py	/^def main():$/;"	f
main	scratch/nlp.py	/^def main():$/;"	f
main	scratch/probability.py	/^def main():$/;"	f
main	scratch/recommender_systems.py	/^def main():$/;"	f
main	scratch/simple_linear_regression.py	/^def main():$/;"	f
main	scratch/working_with_data.py	/^def main():$/;"	f
majority_vote	scratch/k_nearest_neighbors.py	/^def majority_vote(labels: List[str]) -> str:$/;"	f
make_histogram	scratch/working_with_data.py	/^def make_histogram(points: List[float], bucket_size: float) -> Dict[float, int]:$/;"	f
make_matrix	linear_algebra.py	/^def make_matrix(num_rows: int,$/;"	f
make_matrix	scratch/linear_algebra.py	/^def make_matrix(num_rows: int,$/;"	f
make_matrix	scratch/network_analysis.py	/^from scratch.linear_algebra import Matrix, make_matrix, shape$/;"	i
make_matrix	scratch/working_with_data.py	/^from scratch.linear_algebra import Matrix, Vector, make_matrix$/;"	i
make_sentence	scratch/nlp.py	/^def make_sentence() -> str:$/;"	f
make_user_interest_vector	scratch/recommender_systems.py	/^def make_user_interest_vector(user_interests: List[str]) -> List[int]:$/;"	f
map_reduce	scratch/mapreduce.py	/^def map_reduce(inputs: Iterable,$/;"	f
mapper	scratch/mapreduce.py	/^    def mapper(entry: Entry):$/;"	f	function:matrix_multiply_mapper
match	scratch/crash_course_in_python.py	/^from re import *    # uh oh, re has a match function$/;"	i
match	scratch/crash_course_in_python.py	/^match = 10$/;"	v
math	common_import.py	/^import math$/;"	i
math	linear_algebra.py	/^import math$/;"	i
math	naive_bayes.py	/^import math$/;"	i
math	scratch/decision_trees.py	/^import math$/;"	i
math	scratch/deep_learning.py	/^import math$/;"	i
math	scratch/inference.py	/^import math$/;"	i
math	scratch/linear_algebra.py	/^import math$/;"	i
math	scratch/logistic_regression.py	/^import math$/;"	i
math	scratch/naive_bayes.py	/^import math$/;"	i
math	scratch/neural_networks.py	/^import math$/;"	i
math	scratch/nlp.py	/^import math$/;"	i
math	scratch/probability.py	/^import math$/;"	i
math	scratch/statistics.py	/^import math$/;"	i
math	scratch/working_with_data.py	/^import math$/;"	i
math	stats_util.py	/^import math$/;"	i
matplotlib	common_import.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	common_import_seaborn.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	scratch/clustering.py	/^    import matplotlib.image as mpimg$/;"	i
matplotlib	scratch/deep_learning.py	/^    import matplotlib.pyplot as plt$/;"	i
matplotlib	scratch/gradient_descent.py	/^    import matplotlib.pyplot as plt$/;"	i
matplotlib	scratch/nlp.py	/^    import matplotlib.pyplot as plt$/;"	i
matplotlib	scratch/nlp.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	scratch/probability.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	scratch/statistics.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	scratch/working_with_data.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	stats_util.py	/^import matplotlib.pyplot as plt$/;"	i
matrix_multiply_mapper	scratch/mapreduce.py	/^def matrix_multiply_mapper(num_rows_a: int, num_cols_b: int) -> Mapper:$/;"	f
matrix_multiply_reducer	scratch/mapreduce.py	/^def matrix_multiply_reducer(key: Tuple[int, int],$/;"	f
matrix_times_matrix	scratch/network_analysis.py	/^def matrix_times_matrix(m1: Matrix, m2: Matrix) -> Matrix:$/;"	f
matrix_times_vector	scratch/network_analysis.py	/^def matrix_times_vector(m: Matrix, v: Vector) -> Vector:$/;"	f
max_aapl_price	scratch/working_with_data.py	/^max_aapl_price = max(stock_price.closing_price$/;"	v
max_change	scratch/working_with_data.py	/^max_change = max(all_changes, key=lambda change: change.pct_change)$/;"	v
max_reducer	scratch/mapreduce.py	/^max_reducer = values_reducer(max)$/;"	v
maybe_data	scratch/working_with_data.py	/^maybe_data = [try_parse_row(row) for row in rows]$/;"	v
mean	scratch/simple_linear_regression.py	/^from scratch.statistics import correlation, standard_deviation, mean$/;"	i
mean	scratch/statistics.py	/^def mean(xs: List[float]) -> float:$/;"	f
mean	stats_util.py	/^def mean(xs: List[float]) -> float:$/;"	f
median	scratch/multiple_regression.py	/^from scratch.statistics import median, standard_deviation$/;"	i
median	scratch/statistics.py	/^def median(v: List[float]) -> float:$/;"	f
median	stats_util.py	/^def median(v: List[float]) -> float:$/;"	f
medians_close	scratch/multiple_regression.py	/^medians_close = bootstrap_statistic(close_to_100, median, 100)$/;"	v
medians_far	scratch/multiple_regression.py	/^medians_far = bootstrap_statistic(far_from_100, median, 100)$/;"	v
mentions	scratch/visualization.py	/^mentions = [500, 505]$/;"	v
merged	scratch/clustering.py	/^merged = Merged((leaf1, leaf2), order=1)$/;"	v
message	scratch/crash_course_in_python.py	/^    message = "elif stands for 'else if'"$/;"	v
message	scratch/crash_course_in_python.py	/^    message = "if only 1 were greater than two..."$/;"	v
message	scratch/crash_course_in_python.py	/^    message = "when all else fails use else (if you want to)"$/;"	v
messages	scratch/naive_bayes.py	/^messages = [Message("spam rules", is_spam=True),$/;"	v
min_change	scratch/working_with_data.py	/^min_change = min(all_changes, key=lambda change: change.pct_change)$/;"	v
min_reducer	scratch/mapreduce.py	/^min_reducer = values_reducer(min)$/;"	v
min_user_id	scratch/databases.py	/^    def min_user_id(rows) -> int:$/;"	f	function:main
minibatches	scratch/gradient_descent.py	/^def minibatches(dataset: List[T],$/;"	f
minutes	scratch/visualization.py	/^minutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]$/;"	v
mnist	scratch/deep_learning.py	/^    import mnist$/;"	i
mode	scratch/statistics.py	/^def mode(x: List[float]) -> List[float]:$/;"	f
mode	stats_util.py	/^def mode(x: List[float]) -> List[float]:$/;"	f
model	scratch/naive_bayes.py	/^model = NaiveBayesClassifier(k=0.5)$/;"	v
most_common_interests_with	scratch/introduction.py	/^def most_common_interests_with(user):$/;"	f
most_popular_new_interests	scratch/recommender_systems.py	/^def most_popular_new_interests($/;"	f
most_popular_word_reducer	scratch/mapreduce.py	/^    def most_popular_word_reducer(user: str,$/;"	f	function:main
most_similar_interests_to	scratch/recommender_systems.py	/^def most_similar_interests_to(interest_id: int):$/;"	f
most_similar_to_zero	scratch/recommender_systems.py	/^most_similar_to_zero = most_similar_users_to(0)$/;"	v
most_similar_users_to	scratch/recommender_systems.py	/^def most_similar_users_to(user_id: int) -> List[Tuple[int, float]]:$/;"	f
movies	scratch/recommender_systems.py	/^        movies = {movie_id: title for movie_id, title, *_ in reader}$/;"	v	class:main.Rating
movies	scratch/visualization.py	/^movies = ["Annie Hall", "Ben-Hur", "Casablanca", "Gandhi", "West Side Story"]$/;"	v
mpimg	scratch/clustering.py	/^    import matplotlib.image as mpimg$/;"	i
msit0	scratch/recommender_systems.py	/^msit0 = most_similar_interests_to(0)$/;"	v
mu	scratch/inference.py	/^mu = p_hat$/;"	v
multiple_r_squared	scratch/multiple_regression.py	/^def multiple_r_squared(xs: List[Vector], ys: Vector, beta: Vector) -> float:$/;"	f
my_best_friend	scratch/crash_course_in_python.py	/^my_best_friend = random.choice(["Alice", "Bob", "Charlie"])     # "Bob" for me$/;"	v
my_counter	scratch/crash_course_in_python.py	/^my_counter = Counter()$/;"	v
my_double	scratch/crash_course_in_python.py	/^my_double = double             # refers to the previously defined function$/;"	v
my_list	scratch/crash_course_in_python.py	/^my_list = [1, 2]$/;"	v
my_print	scratch/crash_course_in_python.py	/^def my_print(message = "my default message"):$/;"	f
my_regex	scratch/crash_course_in_python.py	/^my_regex = re.compile("[0-9]+", re.I)$/;"	v
my_regex	scratch/crash_course_in_python.py	/^my_regex = regex.compile("[0-9]+", regex.I)$/;"	v
my_tuple	scratch/crash_course_in_python.py	/^my_tuple = (1, 2)$/;"	v
n	scratch/network_analysis.py	/^n = len(users)$/;"	v
name_length	scratch/databases.py	/^    def name_length(row) -> int: return len(row["name"])$/;"	f	function:main
names	scratch/crash_course_in_python.py	/^names = ["Alice", "Bob", "Charlie", "Debbie"]$/;"	v
natural_numbers	scratch/crash_course_in_python.py	/^def natural_numbers():$/;"	f
negative_log_gradient	scratch/logistic_regression.py	/^def negative_log_gradient(xs: List[Vector],$/;"	f
negative_log_likelihood	scratch/logistic_regression.py	/^def negative_log_likelihood(xs: List[Vector],$/;"	f
neuron_output	scratch/neural_networks.py	/^def neuron_output(weights: Vector, inputs: Vector) -> float:$/;"	f
nine	scratch/crash_course_in_python.py	/^nine = x[-1]         # equals 9, 'Pythonic' for last element$/;"	v
no_ones_grade	scratch/crash_course_in_python.py	/^no_ones_grade = grades.get("No One")  # default default is None$/;"	v
normal_approximation_to_binomial	scratch/inference.py	/^def normal_approximation_to_binomial(n: int, p: float) -> Tuple[float, float]:$/;"	f
normal_cdf	scratch/inference.py	/^from scratch.probability import normal_cdf$/;"	i
normal_cdf	scratch/multiple_regression.py	/^from scratch.probability import normal_cdf$/;"	i
normal_cdf	scratch/probability.py	/^def normal_cdf(x: float, mu: float = 0, sigma: float = 1) -> float:$/;"	f
normal_lower_bound	scratch/inference.py	/^def normal_lower_bound(probability: float,$/;"	f
normal_pdf	scratch/probability.py	/^def normal_pdf(x: float, mu: float = 0, sigma: float = 1) -> float:$/;"	f
normal_probability_above	scratch/inference.py	/^def normal_probability_above(lo: float,$/;"	f
normal_probability_below	scratch/inference.py	/^normal_probability_below = normal_cdf$/;"	v
normal_probability_between	scratch/inference.py	/^def normal_probability_between(lo: float,$/;"	f
normal_probability_outside	scratch/inference.py	/^def normal_probability_outside(lo: float,$/;"	f
normal_two_sided_bounds	scratch/inference.py	/^def normal_two_sided_bounds(probability: float,$/;"	f
normal_upper_bound	scratch/inference.py	/^def normal_upper_bound(probability: float,$/;"	f
not	scratch/introduction.py	/^from collections import Counter                   # not loaded by default$/;"	i
not_bias	scratch/neural_networks.py	/^not_bias = 1.$/;"	v
not_tab_string	scratch/crash_course_in_python.py	/^not_tab_string = r"\\t"  # represents the characters '\\' and 't'$/;"	v
not_weights	scratch/neural_networks.py	/^not_weights = [-2.]$/;"	v
note	scratch/crash_course_in_python.py	/^from typing import List  # note capital L$/;"	i
nouns	scratch/nlp.py	/^nouns = ["bed", "car", "boat", "cat"]$/;"	v
np	common_import.py	/^import numpy as np$/;"	i
np	common_import_seaborn.py	/^import numpy as np$/;"	i
np	stats_util.py	/^import numpy as np$/;"	i
num_differences	scratch/clustering.py	/^def num_differences(v1: Vector, v2: Vector) -> int:$/;"	f
num_distinct_items	scratch/crash_course_in_python.py	/^num_distinct_items = len(item_set)        # 3$/;"	v
num_friends	scratch/statistics.py	/^num_friends = [100.0,49,41,40,25,21,21,19,19,18,18,16,15,15,15,15,14,14,13,13,13,13,12,12,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,8,8,8,8,8,8,8,8,8,8,8,8,8,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]$/;"	v
num_friends_by_id	scratch/introduction.py	/^num_friends_by_id = [(user["id"], number_of_friends(user))$/;"	v
num_friends_good	scratch/simple_linear_regression.py	/^from scratch.statistics import num_friends_good, daily_minutes_good$/;"	i
num_friends_good	scratch/statistics.py	/^num_friends_good = [x$/;"	v
num_items	scratch/crash_course_in_python.py	/^num_items = len(item_list)                # 6$/;"	v
num_oscars	scratch/visualization.py	/^num_oscars = [5, 11, 3, 8, 10]$/;"	v
num_paths	scratch/network_analysis.py	/^            num_paths = len(paths)     # how many shortest paths?$/;"	v
num_points	scratch/statistics.py	/^num_points = len(num_friends)               # 204$/;"	v
num_rejections	scratch/inference.py	/^num_rejections = len([experiment$/;"	v
num_students	scratch/crash_course_in_python.py	/^num_students = len(grades)            # equals 3$/;"	v
num_users	scratch/introduction.py	/^num_users = len(users)                            # length of the users list$/;"	v
number_of_friends	scratch/introduction.py	/^def number_of_friends(user):$/;"	f
oh	scratch/crash_course_in_python.py	/^from re import *    # uh oh, re has a match function$/;"	i
on_error	scratch/getting_data.py	/^        def on_error(self, status_code, data):$/;"	m	class:main.MyStreamer
on_success	scratch/getting_data.py	/^        def on_success(self, data):$/;"	m	class:main.MyStreamer
one	scratch/crash_course_in_python.py	/^one = x[1]           # equals 1$/;"	v
one_hot_encode	scratch/deep_learning.py	/^def one_hot_encode(i: int, num_labels: int = 10) -> List[float]:$/;"	f
one_hot_encode	scratch/nlp.py	/^    def one_hot_encode(self, word: str) -> Tensor:$/;"	m	class:Vocabulary
one_hot_encode	scratch/nlp.py	/^    from scratch.deep_learning import Tensor, one_hot_encode$/;"	i
one_is_less_than_two	scratch/crash_course_in_python.py	/^one_is_less_than_two = 1 < 2          # equals True$/;"	v
one_to_four	scratch/crash_course_in_python.py	/^one_to_four = x[1:5]                # [1, 2, 3, 4]$/;"	v
operator	scratch/deep_learning.py	/^import operator$/;"	i
or_bias	scratch/neural_networks.py	/^or_bias = -1.$/;"	v
or_weights	scratch/neural_networks.py	/^or_weights = [2., 2]$/;"	v
order_by	scratch/databases.py	/^    def order_by(self, order: Callable[[Row], Any]) -> 'Table':$/;"	m	class:Table
os	scratch/getting_data.py	/^    import os$/;"	i
other_tuple	scratch/crash_course_in_python.py	/^other_tuple = 3, 4$/;"	v
other_way_magic	scratch/crash_course_in_python.py	/^def other_way_magic(x, y, z):$/;"	f
outlier	scratch/statistics.py	/^outlier = num_friends.index(100)    # index of outlier$/;"	v
p_hat	scratch/inference.py	/^p_hat = 525 \/ 1000$/;"	v
p_hat	scratch/inference.py	/^p_hat = 540 \/ 1000$/;"	v
p_if_ham	scratch/naive_bayes.py	/^p_if_ham = math.exp(sum(math.log(p) for p in probs_if_ham))$/;"	v
p_if_spam	scratch/naive_bayes.py	/^p_if_spam = math.exp(sum(math.log(p) for p in probs_if_spam))$/;"	v
p_spam_given_token	naive_bayes.py	/^def p_spam_given_token(token: str, model: NaiveBayesClassifier) -> float:$/;"	f
p_spam_given_token	scratch/naive_bayes.py	/^    def p_spam_given_token(token: str, model: NaiveBayesClassifier) -> float:$/;"	f	function:main
p_topic_given_document	scratch/nlp.py	/^def p_topic_given_document(topic: int, d: int, alpha: float = 0.1) -> float:$/;"	f
p_value	scratch/multiple_regression.py	/^def p_value(beta_hat_j: float, sigma_hat_j: float) -> float:$/;"	f
p_word_given_topic	scratch/nlp.py	/^def p_word_given_topic(word: str, topic: int, beta: float = 0.1) -> float:$/;"	f
page_rank	scratch/network_analysis.py	/^def page_rank(users: List[User],$/;"	f
pair_distance	scratch/clustering.py	/^    def pair_distance(pair: Tuple[Cluster, Cluster]) -> float:$/;"	f	function:bottom_up_cluster
pairs	scratch/crash_course_in_python.py	/^pairs = [('a', 1), ('b', 2), ('c', 3)]$/;"	v
pairs	scratch/crash_course_in_python.py	/^pairs = [(x, y)$/;"	v
paragraph_mentions	scratch/getting_data.py	/^def paragraph_mentions(text: str, keyword: str) -> bool:$/;"	f
paragraphs_with_ids	scratch/getting_data.py	/^paragraphs_with_ids = [p for p in soup('p') if p.get('id')]$/;"	v
params	scratch/deep_learning.py	/^    def params(self) -> Iterable[Tensor]:$/;"	m	class:Layer
params	scratch/deep_learning.py	/^    def params(self) -> Iterable[Tensor]:$/;"	m	class:Linear
params	scratch/deep_learning.py	/^    def params(self) -> Iterable[Tensor]:$/;"	m	class:Sequential
params	scratch/nlp.py	/^    def params(self) -> Iterable[Tensor]:$/;"	m	class:Embedding
params	scratch/nlp.py	/^    def params(self) -> Iterable[Tensor]:$/;"	m	class:SimpleRnn
parse	scratch/getting_data.py	/^    from dateutil.parser import parse$/;"	i
parse	scratch/working_with_data.py	/^from dateutil.parser import parse$/;"	i
parse_iris_row	scratch/k_nearest_neighbors.py	/^    def parse_iris_row(row: List[str]) -> LabeledPoint:$/;"	f	function:main
parse_row	scratch/working_with_data.py	/^def parse_row(row: List[str]) -> StockPrice:$/;"	f
partial_difference_quotient	scratch/gradient_descent.py	/^    def partial_difference_quotient(f: Callable[[Vector], float],$/;"	f	function:main
partition_by	scratch/decision_trees.py	/^def partition_by(inputs: List[T], attribute: str) -> Dict[Any, List[T]]:$/;"	f
partition_entropy	scratch/decision_trees.py	/^def partition_entropy(subsets: List[List[Any]]) -> float:$/;"	f
partition_entropy_by	scratch/decision_trees.py	/^def partition_entropy_by(inputs: List[Any],$/;"	f
pca	scratch/nlp.py	/^    from scratch.working_with_data import pca, transform$/;"	i
pca	scratch/recommender_systems.py	/^    from scratch.working_with_data import pca, transform$/;"	i
pca	scratch/working_with_data.py	/^def pca(data: List[Vector], num_components: int) -> List[Vector]:$/;"	f
pca_data	scratch/working_with_data.py	/^pca_data = [$/;"	v
pct_change	scratch/working_with_data.py	/^def pct_change(yesterday: StockPrice, today: StockPrice) -> float:$/;"	f
pd	common_import_seaborn.py	/^import pandas as pd$/;"	i
pd	data_prep_util.py	/^import pandas as pd$/;"	i
perceptron_output	scratch/neural_networks.py	/^def perceptron_output(weights: Vector, bias: float, x: Vector) -> float:$/;"	f
plot_histogram	scratch/working_with_data.py	/^def plot_histogram(points: List[float], bucket_size: float, title: str = ""):$/;"	f
plt	common_import.py	/^import matplotlib.pyplot as plt$/;"	i
plt	common_import_seaborn.py	/^import matplotlib.pyplot as plt$/;"	i
plt	scratch/clustering.py	/^    from matplotlib import pyplot as plt$/;"	i
plt	scratch/deep_learning.py	/^    import matplotlib.pyplot as plt$/;"	i
plt	scratch/gradient_descent.py	/^    import matplotlib.pyplot as plt$/;"	i
plt	scratch/k_nearest_neighbors.py	/^    from matplotlib import pyplot as plt$/;"	i
plt	scratch/logistic_regression.py	/^    from matplotlib import pyplot as plt$/;"	i
plt	scratch/logistic_regression.py	/^from matplotlib import pyplot as plt$/;"	i
plt	scratch/nlp.py	/^    from matplotlib import pyplot as plt$/;"	i
plt	scratch/nlp.py	/^    import matplotlib.pyplot as plt$/;"	i
plt	scratch/nlp.py	/^from matplotlib import pyplot as plt$/;"	i
plt	scratch/nlp.py	/^import matplotlib.pyplot as plt$/;"	i
plt	scratch/probability.py	/^import matplotlib.pyplot as plt$/;"	i
plt	scratch/statistics.py	/^import matplotlib.pyplot as plt$/;"	i
plt	scratch/visualization.py	/^from matplotlib import pyplot as plt$/;"	i
plt	scratch/working_with_data.py	/^import matplotlib.pyplot as plt$/;"	i
plt	stats_util.py	/^import matplotlib.pyplot as plt$/;"	i
popular_interests	scratch/recommender_systems.py	/^popular_interests = Counter(interest$/;"	v
power	scratch/inference.py	/^power = 1 - type_2_probability      # 0.887$/;"	v
power	scratch/inference.py	/^power = 1 - type_2_probability      # 0.936$/;"	v
pr	scratch/network_analysis.py	/^pr = page_rank(users, endorsements)$/;"	v
precision	scratch/machine_learning.py	/^def precision(tp: int, fp: int, fn: int, tn: int) -> float:$/;"	f
predict	naive_bayes.py	/^    def predict(self, text: str) -> float:$/;"	m	class:NaiveBayesClassifier
predict	scratch/logistic_regression.py	/^    from scratch.multiple_regression import least_squares_fit, predict$/;"	i
predict	scratch/multiple_regression.py	/^def predict(x: Vector, beta: Vector) -> float:$/;"	f
predict	scratch/naive_bayes.py	/^    def predict(self, text: str) -> float:$/;"	m	class:NaiveBayesClassifier
predict	scratch/simple_linear_regression.py	/^def predict(alpha: float, beta: float, x_i: float) -> float:$/;"	f
predict_paid_or_unpaid	scratch/introduction.py	/^def predict_paid_or_unpaid(years_experience):$/;"	f
previous_count	scratch/crash_course_in_python.py	/^    previous_count = word_counts.get(word, 0)$/;"	v
price	scratch/working_with_data.py	/^price = StockPrice('MSFT', datetime.date(2018, 12, 14), 106.03)$/;"	v
prices	scratch/working_with_data.py	/^prices = {symbol: sorted(symbol_prices)$/;"	v
primes_below_10	scratch/crash_course_in_python.py	/^primes_below_10 = {2, 3, 5, 7}$/;"	v
primes_up_to	scratch/working_with_data.py	/^    def primes_up_to(n: int) -> List[int]:$/;"	f	function:main
probs_if_ham	scratch/naive_bayes.py	/^probs_if_ham = [$/;"	v
probs_if_spam	scratch/naive_bayes.py	/^probs_if_spam = [$/;"	v
process	scratch/getting_data.py	/^def process(date: str, symbol: str, closing_price: float) -> None:$/;"	f
process_data	data_prep_util.py	/^def process_data(df):$/;"	f
project	scratch/working_with_data.py	/^def project(v: Vector, w: Vector) -> Vector:$/;"	f
quantile	scratch/statistics.py	/^def quantile(xs: List[float], p: float) -> float:$/;"	f
quantile	stats_util.py	/^def quantile(xs: List[float], p:float) -> float:$/;"	f
r_squared	scratch/simple_linear_regression.py	/^def r_squared(alpha: float, beta: float, x: Vector, y: Vector) -> float:$/;"	f
random	scratch/clustering.py	/^import random$/;"	i
random	scratch/crash_course_in_python.py	/^import random$/;"	i
random	scratch/deep_learning.py	/^import random$/;"	i
random	scratch/getting_data.py	/^    import random$/;"	i
random	scratch/gradient_descent.py	/^import random$/;"	i
random	scratch/inference.py	/^import random$/;"	i
random	scratch/k_nearest_neighbors.py	/^    import random$/;"	i
random	scratch/k_nearest_neighbors.py	/^import random$/;"	i
random	scratch/logistic_regression.py	/^    import random$/;"	i
random	scratch/machine_learning.py	/^import random$/;"	i
random	scratch/multiple_regression.py	/^import random$/;"	i
random	scratch/naive_bayes.py	/^    import random$/;"	i
random	scratch/network_analysis.py	/^import random$/;"	i
random	scratch/neural_networks.py	/^    import random$/;"	i
random	scratch/nlp.py	/^import random$/;"	i
random	scratch/probability.py	/^    import enum, random$/;"	i
random	scratch/probability.py	/^import random$/;"	i
random	scratch/recommender_systems.py	/^    import random$/;"	i
random	scratch/simple_linear_regression.py	/^    import random$/;"	i
random	scratch/working_with_data.py	/^    import random$/;"	i
random	scratch/working_with_data.py	/^import random$/;"	i
random_distances	scratch/k_nearest_neighbors.py	/^def random_distances(dim: int, num_pairs: int) -> List[float]:$/;"	f
random_kid	scratch/probability.py	/^    def random_kid() -> Kid:$/;"	f	function:main
random_normal	scratch/deep_learning.py	/^def random_normal(*dims: int,$/;"	f
random_normal	scratch/working_with_data.py	/^def random_normal() -> float:$/;"	f
random_point	scratch/k_nearest_neighbors.py	/^def random_point(dim: int) -> Vector:$/;"	f
random_row	scratch/working_with_data.py	/^    def random_row() -> List[float]:$/;"	f	function:main
random_tensor	scratch/deep_learning.py	/^def random_tensor(*dims: int, init: str = 'normal') -> Tensor:$/;"	f
random_tensor	scratch/nlp.py	/^from scratch.deep_learning import Layer, Tensor, random_tensor, zeros_like$/;"	i
random_tensor	scratch/recommender_systems.py	/^    from scratch.deep_learning import random_tensor$/;"	i
random_uniform	scratch/deep_learning.py	/^def random_uniform(*dims: int) -> Tensor:$/;"	f
random_x_given_y	scratch/nlp.py	/^def random_x_given_y(y: int) -> int:$/;"	f
random_y_given_x	scratch/nlp.py	/^def random_y_given_x(x: int) -> int:$/;"	f
ratings	scratch/recommender_systems.py	/^        ratings = [Rating(user_id, movie_id, float(rating))$/;"	v	class:main.Rating
raw_majority_vote	scratch/k_nearest_neighbors.py	/^def raw_majority_vote(labels: List[str]) -> str:$/;"	f
re	naive_bayes.py	/^import re$/;"	i
re	scratch/crash_course_in_python.py	/^from re import *    # uh oh, re has a match function$/;"	i
re	scratch/crash_course_in_python.py	/^import re$/;"	i
re	scratch/getting_data.py	/^    import re$/;"	i
re	scratch/naive_bayes.py	/^    import glob, re$/;"	i
re	scratch/naive_bayes.py	/^import re$/;"	i
re	scratch/nlp.py	/^    import re$/;"	i
re	scratch/nlp.py	/^import re$/;"	i
re	scratch/recommender_systems.py	/^    import re$/;"	i
re	scratch/working_with_data.py	/^import re$/;"	i
re_examples	scratch/crash_course_in_python.py	/^re_examples = [                        # all of these are true, because$/;"	v
read	scratch/crash_course_in_python.py	/^    def read(self):$/;"	m	class:CountingClicker
reader	scratch/recommender_systems.py	/^        reader = csv.reader(f, delimiter="\\t")$/;"	v	class:main.Rating
reader	scratch/recommender_systems.py	/^        reader = csv.reader(f, delimiter="|")$/;"	v	class:main.Rating
reader	scratch/working_with_data.py	/^    reader = csv.DictReader(f)$/;"	v
recall	scratch/machine_learning.py	/^def recall(tp: int, fp: int, fn: int, tn: int) -> float:$/;"	f
recolor	scratch/clustering.py	/^    def recolor(pixel: Vector) -> Vector:$/;"	f	function:main
reduce	scratch/mapreduce.py	/^    def reduce(key, values: Iterable) -> KV:$/;"	f	function:values_reducer
regex	scratch/crash_course_in_python.py	/^import re as regex$/;"	i
regex	scratch/nlp.py	/^regex = r"[\\w']+|[\\.]"                       # matches a word or a period$/;"	v
reject_fairness	scratch/inference.py	/^def reject_fairness(experiment: List[bool]) -> bool:$/;"	f
remove_projection	scratch/working_with_data.py	/^def remove_projection(data: List[Vector], w: Vector) -> List[Vector]:$/;"	f
remove_projection_from_vector	scratch/working_with_data.py	/^def remove_projection_from_vector(v: Vector, w: Vector) -> Vector:$/;"	f
requests	scratch/getting_data.py	/^    import requests$/;"	i
requests	scratch/getting_data.py	/^    import requests, json$/;"	i
requests	scratch/getting_data.py	/^import requests$/;"	i
requests	scratch/nlp.py	/^    import requests$/;"	i
requests	scratch/nlp.py	/^import requests$/;"	i
rescale	scratch/logistic_regression.py	/^    from scratch.working_with_data import rescale$/;"	i
rescale	scratch/working_with_data.py	/^def rescale(data: List[Vector]) -> List[Vector]:$/;"	f
reset	scratch/crash_course_in_python.py	/^    def reset(self):$/;"	m	class:CountingClicker
reset	scratch/crash_course_in_python.py	/^    def reset(self):$/;"	m	class:NoResetClicker
reset_hidden_state	scratch/nlp.py	/^    def reset_hidden_state(self) -> None:$/;"	m	class:SimpleRnn
results	scratch/getting_data.py	/^results = [["test1", "success", "Monday"],$/;"	v
reverse	scratch/crash_course_in_python.py	/^            reverse=True)$/;"	v
reverse	scratch/introduction.py	/^       reverse=True)                                   # largest to smallest$/;"	v
ridge_penalty	scratch/multiple_regression.py	/^def ridge_penalty(beta: Vector, alpha: float) -> float:$/;"	f
ridge_penalty_gradient	scratch/multiple_regression.py	/^def ridge_penalty_gradient(beta: Vector, alpha: float) -> Vector:$/;"	f
roll_a_die	scratch/nlp.py	/^def roll_a_die() -> int:$/;"	f
rotate	scratch/network_analysis.py	/^rotate = [[ 0, 1],$/;"	v
row	scratch/deep_learning.py	/^    row = [0, 0]$/;"	v
rows	scratch/working_with_data.py	/^    rows = [[row['Symbol'], row['Date'], row['Close']]$/;"	v
rsq	scratch/simple_linear_regression.py	/^rsq = r_squared(alpha, beta, num_friends_good, daily_minutes_good)$/;"	v
run_experiment	scratch/inference.py	/^def run_experiment() -> List[bool]:$/;"	f
s	scratch/crash_course_in_python.py	/^s = set()$/;"	v
s	scratch/crash_course_in_python.py	/^s = some_function_that_returns_a_string()$/;"	v
safe_x	scratch/crash_course_in_python.py	/^safe_x = x if x is not None else 0$/;"	v
safe_x	scratch/crash_course_in_python.py	/^safe_x = x or 0$/;"	v
salaries_and_tenures	friendship.py	/^salaries_and_tenures = [(83000, 8.7), (88000, 8.1),$/;"	v
salaries_and_tenures	scratch/introduction.py	/^salaries_and_tenures = [(83000, 8.7), (88000, 8.1),$/;"	v
salary_by_tenure	scratch/introduction.py	/^salary_by_tenure = defaultdict(list)$/;"	v
salary_by_tenure_bucket	scratch/introduction.py	/^salary_by_tenure_bucket = defaultdict(list)$/;"	v
sample_from	scratch/nlp.py	/^def sample_from(weights: List[float]) -> int:$/;"	f
save_vocab	scratch/nlp.py	/^def save_vocab(vocab: Vocabulary, filename: str) -> None:$/;"	f
save_weights	scratch/deep_learning.py	/^def save_weights(model: Layer, filename: str) -> None:$/;"	f
scalar_multiply	linear_algebra.py	/^def scalar_multiply(c: float, v: Vector) -> Vector:$/;"	f
scalar_multiply	scratch/gradient_descent.py	/^from scratch.linear_algebra import distance, add, scalar_multiply$/;"	i
scalar_multiply	scratch/linear_algebra.py	/^def scalar_multiply(c: float, v: Vector) -> Vector:$/;"	f
scalar_multiply	scratch/working_with_data.py	/^from scratch.linear_algebra import scalar_multiply$/;"	i
scale	scratch/logistic_regression.py	/^    from scratch.working_with_data import scale$/;"	i
scale	scratch/working_with_data.py	/^def scale(data: List[Vector]) -> Tuple[Vector, Vector]:$/;"	f
second_largest_value	scratch/statistics.py	/^second_largest_value = sorted_values[-2]    # 49$/;"	v
second_smallest_value	scratch/statistics.py	/^second_smallest_value = sorted_values[1]    # 1$/;"	v
secretly_ugly_function	scratch/crash_course_in_python.py	/^def secretly_ugly_function(value, operation): ...$/;"	f
select	scratch/databases.py	/^    def select(self,$/;"	m	class:Table
sentences	scratch/nlp.py	/^sentences = [make_sentence() for _ in range(NUM_SENTENCES)]$/;"	v
shape	linear_algebra.py	/^def shape(A: Matrix) -> Tuple[int,int]:$/;"	f
shape	scratch/deep_learning.py	/^def shape(tensor: Tensor) -> List[int]:$/;"	f
shape	scratch/linear_algebra.py	/^def shape(A: Matrix) -> Tuple[int, int]:$/;"	f
shape	scratch/network_analysis.py	/^from scratch.linear_algebra import Matrix, make_matrix, shape$/;"	i
shortest_paths	scratch/network_analysis.py	/^shortest_paths = {user.id: shortest_paths_from(user.id, friendships)$/;"	v
shortest_paths_from	scratch/network_analysis.py	/^def shortest_paths_from(from_user_id: int,$/;"	f
sigma	scratch/inference.py	/^sigma = math.sqrt(p_hat * (1 - p_hat) \/ 1000)   # 0.0158$/;"	v
sigma	scratch/inference.py	/^sigma = math.sqrt(p_hat * (1 - p_hat) \/ 1000) # 0.0158$/;"	v
sigmoid	scratch/deep_learning.py	/^from scratch.neural_networks import sigmoid$/;"	i
sigmoid	scratch/neural_networks.py	/^def sigmoid(t: float) -> float:$/;"	f
single_quoted_string	scratch/crash_course_in_python.py	/^single_quoted_string = 'data science'$/;"	v
size	scratch/nlp.py	/^    def size(self) -> int:$/;"	m	class:Vocabulary
smallest_item	scratch/crash_course_in_python.py	/^def smallest_item(xs):$/;"	f
smallest_value	scratch/statistics.py	/^smallest_value = min(num_friends)           # 1$/;"	v
smallest_value	scratch/statistics.py	/^smallest_value = sorted_values[0]           # 1$/;"	v
sns	common_import.py	/^import seaborn as sns$/;"	i
sns	common_import_seaborn.py	/^import seaborn as sns$/;"	i
sns	stats_util.py	/^import seaborn as sns$/;"	i
softmax	scratch/deep_learning.py	/^def softmax(tensor: Tensor) -> Tensor:$/;"	f
softmax	scratch/nlp.py	/^    from scratch.deep_learning import softmax$/;"	i
some_function_that_returns_a_string	scratch/crash_course_in_python.py	/^def some_function_that_returns_a_string():$/;"	f
sorted_values	scratch/statistics.py	/^sorted_values = sorted(num_friends)$/;"	v
soup	scratch/getting_data.py	/^soup = BeautifulSoup(html, 'html5lib')$/;"	v
soup	scratch/nlp.py	/^soup = BeautifulSoup(html, 'html5lib')$/;"	v
sp	scratch/crash_course_in_python.py	/^sp = sum_and_product(2, 3)     # sp is (5, 6)$/;"	v
spans_inside_divs	scratch/getting_data.py	/^spans_inside_divs = [span$/;"	v
split_data	scratch/k_nearest_neighbors.py	/^    from scratch.machine_learning import split_data$/;"	i
split_data	scratch/machine_learning.py	/^def split_data(data: List[X], prob: float) -> Tuple[List[X], List[X]]:$/;"	f
split_data	scratch/naive_bayes.py	/^    from scratch.machine_learning import split_data$/;"	i
split_entropy	scratch/decision_trees.py	/^    def split_entropy(attribute: str) -> float:$/;"	f	function:build_tree_id3
sqerror_gradient	scratch/multiple_regression.py	/^def sqerror_gradient(x: Vector, y: float, beta: Vector) -> Vector:$/;"	f
sqerror_gradients	scratch/neural_networks.py	/^def sqerror_gradients(network: List[List[Vector]],$/;"	f
sqerror_ridge_gradient	scratch/multiple_regression.py	/^def sqerror_ridge_gradient(x: Vector,$/;"	f
square	scratch/gradient_descent.py	/^def square(x: float) -> float:$/;"	f
square_dict	scratch/crash_course_in_python.py	/^square_dict = {x: x * x for x in range(5)}  # {0: 0, 1: 1, 2: 4, 3: 9, 4: 16}$/;"	v
square_set	scratch/crash_course_in_python.py	/^square_set  = {x * x for x in [1, -1]}      # {1}$/;"	v
squared_clustering_errors	scratch/clustering.py	/^    def squared_clustering_errors(inputs: List[Vector], k: int) -> float:$/;"	f	function:main
squared_distance	scratch/clustering.py	/^from scratch.linear_algebra import squared_distance$/;"	i
squared_distance	scratch/deep_learning.py	/^from scratch.linear_algebra import squared_distance$/;"	i
squared_distance	scratch/linear_algebra.py	/^def squared_distance(v: Vector, w: Vector) -> float:$/;"	f
squared_distance	scratch/neural_networks.py	/^    from scratch.linear_algebra import squared_distance$/;"	i
squared_error	scratch/multiple_regression.py	/^def squared_error(x: Vector, y: float, beta: Vector) -> float:$/;"	f
squared_error_ridge	scratch/multiple_regression.py	/^def squared_error_ridge(x: Vector,$/;"	f
squares	scratch/crash_course_in_python.py	/^squares      = [x * x for x in range(5)]            # [0, 1, 4, 9, 16]$/;"	v
sse_loss	scratch/deep_learning.py	/^sse_loss = SSE()$/;"	v
standard_deviation	scratch/multiple_regression.py	/^from scratch.statistics import median, standard_deviation$/;"	i
standard_deviation	scratch/simple_linear_regression.py	/^from scratch.statistics import correlation, standard_deviation, mean$/;"	i
standard_deviation	scratch/statistics.py	/^def standard_deviation(xs: List[float]) -> float:$/;"	f
standard_deviation	scratch/working_with_data.py	/^from scratch.statistics import standard_deviation$/;"	i
standard_deviation	stats_util.py	/^def standard_deviation(xs: List[float]) -> float:$/;"	f
starts	scratch/nlp.py	/^starts = []$/;"	v
step	scratch/deep_learning.py	/^    def step(self, layer: Layer) -> None:$/;"	m	class:GradientDescent
step	scratch/deep_learning.py	/^    def step(self, layer: Layer) -> None:$/;"	m	class:Momentum
step	scratch/deep_learning.py	/^    def step(self, layer: Layer) -> None:$/;"	m	class:Optimizer
step	scratch/nlp_advanced.py	/^    def step(self, layer: Layer) -> None:$/;"	m	class:EmbeddingOptimizer
step_function	scratch/neural_networks.py	/^def step_function(x: float) -> float:$/;"	f
stock	scratch/working_with_data.py	/^stock = parse_row(["MSFT", "2018-12-14", "106.03"])$/;"	v
stock_price	scratch/working_with_data.py	/^stock_price = {'closing_price': 102.06,$/;"	v
stopwords_list	scratch/crash_course_in_python.py	/^stopwords_list = ["a", "an", "at"] + hundreds_of_other_words + ["yet", "you"]$/;"	v
stopwords_set	scratch/crash_course_in_python.py	/^stopwords_set = set(stopwords_list)$/;"	v
subtract	scratch/linear_algebra.py	/^def subtract(v: Vector, w: Vector) -> Vector:$/;"	f
subtract	scratch/working_with_data.py	/^from scratch.linear_algebra import subtract$/;"	i
sum_and_product	scratch/crash_course_in_python.py	/^def sum_and_product(x, y):$/;"	f
sum_of_sqerrors	scratch/simple_linear_regression.py	/^def sum_of_sqerrors(alpha: float, beta: float, x: Vector, y: Vector) -> float:$/;"	f
sum_of_squares	common_import.py	/^from scratch.linear_algebra import sum_of_squares$/;"	i
sum_of_squares	linear_algebra.py	/^def sum_of_squares(v: Vector) -> float:$/;"	f
sum_of_squares	scratch/gradient_descent.py	/^def sum_of_squares(v: Vector) -> float:$/;"	f
sum_of_squares	scratch/linear_algebra.py	/^def sum_of_squares(v: Vector) -> float:$/;"	f
sum_of_squares	scratch/statistics.py	/^from scratch.linear_algebra import sum_of_squares$/;"	i
sum_of_squares	stats_util.py	/^from scratch.linear_algebra import sum_of_squares$/;"	i
sum_of_squares_gradient	scratch/gradient_descent.py	/^def sum_of_squares_gradient(v: Vector) -> Vector:$/;"	f
sum_reducer	scratch/mapreduce.py	/^sum_reducer = values_reducer(sum)$/;"	v
sum_user_ids	scratch/databases.py	/^    def sum_user_ids(rows: List[Row]) -> int:$/;"	f	function:main
symbol	scratch/getting_data.py	/^        symbol = dict_row["symbol"]$/;"	v
tab_string	scratch/crash_course_in_python.py	/^tab_string = "\\t"       # represents the tab character$/;"	v
tanh	scratch/deep_learning.py	/^def tanh(x: float) -> float:$/;"	f
tanh	scratch/nlp.py	/^from scratch.deep_learning import tensor_apply, tanh$/;"	i
tensor	scratch/deep_learning.py	/^tensor = [[1, 2], [3, 4]]$/;"	v
tensor_apply	scratch/deep_learning.py	/^def tensor_apply(f: Callable[[float], float], tensor: Tensor) -> Tensor:$/;"	f
tensor_apply	scratch/nlp.py	/^from scratch.deep_learning import tensor_apply, tanh$/;"	i
tensor_combine	scratch/deep_learning.py	/^def tensor_combine(f: Callable[[float, float], float],$/;"	f
tensor_sum	scratch/deep_learning.py	/^def tensor_sum(tensor: Tensor) -> float:$/;"	f
tenure_bucket	scratch/introduction.py	/^def tenure_bucket(tenure):$/;"	f
test_1_grades	scratch/visualization.py	/^test_1_grades = [ 99, 90, 85, 97, 80]$/;"	v
test_2_grades	scratch/visualization.py	/^test_2_grades = [100, 85, 60, 90, 70]$/;"	v
text	scratch/naive_bayes.py	/^text = "hello spam"$/;"	v
text_size	scratch/nlp.py	/^    def text_size(total: int) -> float:$/;"	f	function:main
textcoords	scratch/visualization.py	/^        textcoords='offset points')$/;"	v
three_to_end	scratch/crash_course_in_python.py	/^three_to_end = x[3:]                # [3, 4, ..., 9]$/;"	v
titlepad	common_import_seaborn.py	/^    titlepad=10,$/;"	v
titlesize	common_import_seaborn.py	/^    titlesize=14,$/;"	v
titleweight	common_import_seaborn.py	/^    titleweight="bold",$/;"	v
todays_prices	scratch/getting_data.py	/^todays_prices = {'AAPL': 90.91, 'MSFT': 41.68, 'FB': 64.5 }$/;"	v
tokenize	naive_bayes.py	/^def tokenize(text: str) -> Set[str]:$/;"	f
tokenize	scratch/mapreduce.py	/^def tokenize(document: str) -> List[str]:$/;"	f
tokenize	scratch/naive_bayes.py	/^def tokenize(text: str) -> Set[str]:$/;"	f
topic_counts	scratch/nlp.py	/^topic_counts = [0 for _ in range(K)]$/;"	v
topic_names	scratch/nlp.py	/^topic_names = ["Big Data and programming languages",$/;"	v
topic_weight	scratch/nlp.py	/^def topic_weight(d: int, word: str, k: int) -> float:$/;"	f
topic_word_counts	scratch/nlp.py	/^topic_word_counts = [Counter() for _ in range(K)]$/;"	v
total	scratch/crash_course_in_python.py	/^def total(xs: List[float]) -> float:$/;"	f
total	scratch/crash_course_in_python.py	/^def total(xs: Numbers) -> Number:$/;"	f
total	scratch/crash_course_in_python.py	/^def total(xs: list) -> float:$/;"	f
total_connections	scratch/introduction.py	/^total_connections = sum(number_of_friends(user)$/;"	v
total_error	scratch/visualization.py	/^total_error  = [x + y for x, y in zip(variance, bias_squared)]$/;"	v
total_sum_of_squares	scratch/multiple_regression.py	/^from scratch.simple_linear_regression import total_sum_of_squares$/;"	i
total_sum_of_squares	scratch/simple_linear_regression.py	/^def total_sum_of_squares(y: Vector) -> float:$/;"	f
tqdm	scratch/clustering.py	/^import tqdm$/;"	i
tqdm	scratch/deep_learning.py	/^    import tqdm$/;"	i
tqdm	scratch/k_nearest_neighbors.py	/^    import tqdm$/;"	i
tqdm	scratch/logistic_regression.py	/^    import tqdm$/;"	i
tqdm	scratch/multiple_regression.py	/^import tqdm$/;"	i
tqdm	scratch/network_analysis.py	/^import tqdm$/;"	i
tqdm	scratch/neural_networks.py	/^    import tqdm$/;"	i
tqdm	scratch/nlp.py	/^import tqdm$/;"	i
tqdm	scratch/recommender_systems.py	/^    import tqdm$/;"	i
tqdm	scratch/simple_linear_regression.py	/^    import tqdm$/;"	i
tqdm	scratch/working_with_data.py	/^import tqdm$/;"	i
train	naive_bayes.py	/^    def train(self, messages: Iterable[Message]) -> None:$/;"	m	class:NaiveBayesClassifier
train	scratch/clustering.py	/^    def train(self, inputs: List[Vector]) -> None:$/;"	m	class:KMeans
train	scratch/naive_bayes.py	/^    def train(self, messages: Iterable[Message]) -> None:$/;"	m	class:NaiveBayesClassifier
train_test_split	scratch/logistic_regression.py	/^    from scratch.machine_learning import train_test_split$/;"	i
train_test_split	scratch/machine_learning.py	/^def train_test_split(xs: List[X],$/;"	f
transform	scratch/nlp.py	/^    from scratch.working_with_data import pca, transform$/;"	i
transform	scratch/recommender_systems.py	/^    from scratch.working_with_data import pca, transform$/;"	i
transform	scratch/working_with_data.py	/^def transform(data: List[Vector], components: List[Vector]) -> List[Vector]:$/;"	f
transform_vector	scratch/working_with_data.py	/^def transform_vector(v: Vector, components: List[Vector]) -> Vector:$/;"	f
transitions	scratch/nlp.py	/^transitions = defaultdict(list)$/;"	v
tree	scratch/decision_trees.py	/^tree = build_tree_id3(inputs,$/;"	v
trigram_transitions	scratch/nlp.py	/^trigram_transitions = defaultdict(list)$/;"	v
try_parse_row	scratch/working_with_data.py	/^def try_parse_row(row: List[str]) -> Optional[StockPrice]:$/;"	f
tspv	scratch/inference.py	/^tspv = two_sided_p_value(531.5, mu_0, sigma_0)$/;"	v
tuples	scratch/logistic_regression.py	/^tuples = [(0.7,48000,1),(1.9,48000,0),(2.5,60000,1),(4.2,63000,0),(6,76000,0),(6.5,69000,0),(7.5,76000,0),(8.1,88000,0),(8.7,83000,1),(10,83000,1),(0.8,43000,0),(1.8,60000,0),(10,79000,1),(6.1,76000,0),(1.4,50000,0),(9.1,92000,0),(5.8,75000,0),(5.2,69000,0),(1,56000,0),(6,67000,0),(4.9,74000,0),(6.4,63000,1),(6.2,82000,0),(3.3,58000,0),(9.3,90000,1),(5.5,57000,1),(9.1,102000,0),(2.4,54000,0),(8.2,65000,1),(5.3,82000,0),(9.8,107000,0),(1.8,64000,0),(0.6,46000,1),(0.8,48000,0),(8.6,84000,1),(0.6,45000,0),(0.5,30000,1),(7.3,89000,0),(2.5,48000,1),(5.6,76000,0),(7.4,77000,0),(2.7,56000,0),(0.7,48000,0),(1.2,42000,0),(0.2,32000,1),(4.7,56000,1),(2.8,44000,1),(7.6,78000,0),(1.1,63000,0),(8,79000,1),(2.7,56000,0),(6,52000,1),(4.6,56000,0),(2.5,51000,0),(5.7,71000,0),(2.9,65000,0),(1.1,33000,1),(3,62000,0),(4,71000,0),(2.4,61000,0),(7.5,75000,0),(9.7,81000,1),(3.2,62000,0),(7.9,88000,0),(4.7,44000,1),(2.5,55000,0),(1.6,41000,0),(6.7,64000,1),(6.9,66000,1),(7.9,78000,1),(8.1,102000,0),(5.3,48000,1),(8.5,66000,1),(0.2,56000,0),(6,69000,0),(7.5,77000,0),(8,86000,0),(4.4,68000,0),(4.9,75000,0),(1.5,60000,0),(2.2,50000,0),(3.4,49000,1),(4.2,70000,0),(7.7,98000,0),(8.2,85000,0),(5.4,88000,0),(0.1,46000,0),(1.5,37000,0),(6.3,86000,0),(3.7,57000,0),(8.4,85000,0),(2,42000,0),(5.8,69000,1),(2.7,64000,0),(3.1,63000,0),(1.9,48000,0),(10,72000,1),(0.2,45000,0),(8.6,95000,0),(1.5,64000,0),(9.8,95000,0),(5.3,65000,0),(7.5,80000,0),(9.9,91000,0),(9.7,50000,1),(2.8,68000,0),(3.6,58000,0),(3.9,74000,0),(4.4,76000,0),(2.5,49000,0),(7.2,81000,0),(5.2,60000,1),(2.4,62000,0),(8.9,94000,0),(2.4,63000,0),(6.8,69000,1),(6.5,77000,0),(7,86000,0),(9.4,94000,0),(7.8,72000,1),(0.2,53000,0),(10,97000,0),(5.5,65000,0),(7.7,71000,1),(8.1,66000,1),(9.8,91000,0),(8,84000,0),(2.7,55000,0),(2.8,62000,0),(9.4,79000,0),(2.5,57000,0),(7.4,70000,1),(2.1,47000,0),(5.3,62000,1),(6.3,79000,0),(6.8,58000,1),(5.7,80000,0),(2.2,61000,0),(4.8,62000,0),(3.7,64000,0),(4.1,85000,0),(2.3,51000,0),(3.5,58000,0),(0.9,43000,0),(0.9,54000,0),(4.5,74000,0),(6.5,55000,1),(4.1,41000,1),(7.1,73000,0),(1.1,66000,0),(9.1,81000,1),(8,69000,1),(7.3,72000,1),(3.3,50000,0),(3.9,58000,0),(2.6,49000,0),(1.6,78000,0),(0.7,56000,0),(2.1,36000,1),(7.5,90000,0),(4.8,59000,1),(8.9,95000,0),(6.2,72000,0),(6.3,63000,0),(9.1,100000,0),(7.3,61000,1),(5.6,74000,0),(0.5,66000,0),(1.1,59000,0),(5.1,61000,0),(6.2,70000,0),(6.6,56000,1),(6.3,76000,0),(6.5,78000,0),(5.1,59000,0),(9.5,74000,1),(4.5,64000,0),(2,54000,0),(1,52000,0),(4,69000,0),(6.5,76000,0),(3,60000,0),(4.5,63000,0),(7.8,70000,0),(3.9,60000,1),(0.8,51000,0),(4.2,78000,0),(1.1,54000,0),(6.2,60000,0),(2.9,59000,0),(2.1,52000,0),(8.2,87000,0),(4.8,73000,0),(2.2,42000,1),(9.1,98000,0),(6.5,84000,0),(6.9,73000,0),(5.1,72000,0),(9.1,69000,1),(9.8,79000,1),]$/;"	v
tweet	scratch/crash_course_in_python.py	/^tweet = {$/;"	v
tweet_items	scratch/crash_course_in_python.py	/^tweet_items  = tweet.items()    # iterable for the (key, value) tuples$/;"	v
tweet_keys	scratch/crash_course_in_python.py	/^tweet_keys   = tweet.keys()     # iterable for the keys$/;"	v
tweet_values	scratch/crash_course_in_python.py	/^tweet_values = tweet.values()   # iterable for the values$/;"	v
twice	scratch/crash_course_in_python.py	/^def twice(repeater: Callable[[str, int], str], s: str) -> str:$/;"	f
two_plus_three	scratch/crash_course_in_python.py	/^                 3$/;"	v
two_sided_p_value	scratch/inference.py	/^def two_sided_p_value(x: float, mu: float = 0, sigma: float = 1) -> float:$/;"	f
type_2_probability	scratch/inference.py	/^type_2_probability = normal_probability_below(hi, mu_1, sigma_1)$/;"	v
type_2_probability	scratch/inference.py	/^type_2_probability = normal_probability_between(lo, hi, mu_1, sigma_1)$/;"	v
ubs0	scratch/recommender_systems.py	/^ubs0 = user_based_suggestions(0)$/;"	v
ugly_function	scratch/crash_course_in_python.py	/^def ugly_function(value: int, operation: Union[str, int, float, bool]) -> int:$/;"	f
uh	scratch/crash_course_in_python.py	/^from re import *    # uh oh, re has a match function$/;"	i
uniform_cdf	scratch/probability.py	/^def uniform_cdf(x: float) -> float:$/;"	f
uniform_pdf	scratch/probability.py	/^    def uniform_pdf(x: float) -> float:$/;"	f	function:main
unique_interests	scratch/recommender_systems.py	/^unique_interests = sorted({interest$/;"	v
up_to_ten	scratch/crash_course_in_python.py	/^up_to_ten = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]$/;"	v
update	scratch/databases.py	/^    def update(self,$/;"	m	class:Table
upper_p_value	scratch/inference.py	/^upper_p_value = normal_probability_above$/;"	v
url	scratch/getting_data.py	/^url = ("https:\/\/raw.githubusercontent.com\/"$/;"	v
url	scratch/nlp.py	/^url = "https:\/\/www.oreilly.com\/ideas\/what-is-data-science"$/;"	v
user_based_suggestions	scratch/recommender_systems.py	/^def user_based_suggestions(user_id: int,$/;"	f
user_ids_by_interest	scratch/introduction.py	/^user_ids_by_interest = defaultdict(list)$/;"	v
user_interest_vectors	scratch/recommender_systems.py	/^user_interest_vectors = [make_user_interest_vector(user_interests)$/;"	v
user_similarities	scratch/recommender_systems.py	/^user_similarities = [[cosine_similarity(interest_vector_i, interest_vector_j)$/;"	v
users	friendship.py	/^users = [$/;"	v
users	scratch/databases.py	/^users = [[0, "Hero", 0],$/;"	v
users	scratch/introduction.py	/^users = [$/;"	v
users	scratch/network_analysis.py	/^users = [User(0, "Hero"), User(1, "Dunn"), User(2, "Sue"), User(3, "Chi"),$/;"	v
users_interests	scratch/recommender_systems.py	/^users_interests = [$/;"	v
values	scratch/crash_course_in_python.py	/^values = []         # what's my type?$/;"	v
values_reducer	scratch/mapreduce.py	/^def values_reducer(values_fn: Callable) -> Reducer:$/;"	f
variance	scratch/statistics.py	/^def variance(xs: List[float]) -> float:$/;"	f
variance	scratch/visualization.py	/^variance     = [1, 2, 4, 8, 16, 32, 64, 128, 256]$/;"	v
variance	stats_util.py	/^def variance(xs: List[float]) -> float:$/;"	f
vector_add	linear_algebra.py	/^def vector_add(v1: Vector, v2: Vector) -> Vector:$/;"	f
vector_mean	linear_algebra.py	/^def vector_mean(vectors: List[Vector]) -> float:$/;"	f
vector_mean	scratch/clustering.py	/^from scratch.linear_algebra import vector_mean$/;"	i
vector_mean	scratch/gradient_descent.py	/^    from scratch.linear_algebra import vector_mean$/;"	i
vector_mean	scratch/linear_algebra.py	/^def vector_mean(vectors: List[Vector]) -> Vector:$/;"	f
vector_mean	scratch/multiple_regression.py	/^from scratch.linear_algebra import vector_mean$/;"	i
vector_mean	scratch/working_with_data.py	/^from scratch.linear_algebra import vector_mean$/;"	i
vector_subtract	linear_algebra.py	/^def vector_subtract(v1: Vector, v2: Vector) -> Vector:$/;"	f
vector_sum	linear_algebra.py	/^def vector_sum(vectors: List[Vector]) -> Vector:$/;"	f
vector_sum	scratch/linear_algebra.py	/^def vector_sum(vectors: List[Vector]) -> Vector:$/;"	f
vector_sum	scratch/logistic_regression.py	/^from scratch.linear_algebra import vector_sum$/;"	i
vectors	scratch/working_with_data.py	/^vectors = [[-3, -1, 1], [-1, 0, 1], [1, 1, 1]]$/;"	v
vectors	scratch/working_with_data.py	/^vectors = [xs, ys1, ys2]$/;"	v
verbs	scratch/nlp.py	/^verbs = ["is", "was", "seems"]$/;"	v
vocab	scratch/nlp.py	/^vocab = Vocabulary(["a", "b", "c"])$/;"	v
wc	scratch/crash_course_in_python.py	/^wc = sorted(word_counts.items(),$/;"	v
wc	scratch/mapreduce.py	/^wc = word_count(["data science", "big data", "science fiction"])$/;"	v
wc_mapper	scratch/mapreduce.py	/^def wc_mapper(document: str) -> Iterator[Tuple[str, int]]:$/;"	f
wc_reducer	scratch/mapreduce.py	/^def wc_reducer(word: str,$/;"	f
webbrowser	scratch/getting_data.py	/^    import webbrowser$/;"	i
where	scratch/databases.py	/^    def where(self, predicate: WhereClause = lambda row: True) -> 'Table':$/;"	m	class:Table
winning_numbers	scratch/crash_course_in_python.py	/^winning_numbers = random.sample(lottery_numbers, 6)  # [16, 36, 10, 6, 25, 9]$/;"	v
without_first_and_last	scratch/crash_course_in_python.py	/^without_first_and_last = x[1:-1]    # [1, 2, ..., 8]$/;"	v
word_count	scratch/mapreduce.py	/^def word_count(documents: List[str]) -> List[Tuple[str, int]]:$/;"	f
word_count_old	scratch/mapreduce.py	/^def word_count_old(documents: List[str]):$/;"	f
word_counts	scratch/crash_course_in_python.py	/^word_counts = Counter(document)$/;"	v
word_counts	scratch/crash_course_in_python.py	/^word_counts = defaultdict(int)          # int() produces 0$/;"	v
word_counts	scratch/crash_course_in_python.py	/^word_counts = {}$/;"	v
words_and_counts	scratch/introduction.py	/^words_and_counts = Counter(word$/;"	v
words_per_user_mapper	scratch/mapreduce.py	/^    def words_per_user_mapper(status_update: dict):$/;"	f	function:main
x	scratch/crash_course_in_python.py	/^x = 0$/;"	v
x	scratch/crash_course_in_python.py	/^x = None$/;"	v
x	scratch/crash_course_in_python.py	/^x = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]$/;"	v
x	scratch/crash_course_in_python.py	/^x = [1, 2, 3]$/;"	v
x	scratch/crash_course_in_python.py	/^x = [4, 1, 2, 3]$/;"	v
x	scratch/crash_course_in_python.py	/^x = apply_to_one(my_double)    # equals 2$/;"	v
x	scratch/crash_course_in_python.py	/^x = len(s)     # equals 2$/;"	v
x	scratch/crash_course_in_python.py	/^x = sorted([-4, 1, -2, 3], key=abs, reverse=True)  # is [-4, 3, -2, 1]$/;"	v
x	scratch/multiple_regression.py	/^x = [1, 2, 3]$/;"	v
x	scratch/simple_linear_regression.py	/^x = [i for i in range(-100, 110, 10)]$/;"	v
x_y_list	scratch/crash_course_in_python.py	/^x_y_list = [1, 2]$/;"	v
xor_network	scratch/neural_networks.py	/^xor_network = [# hidden layer$/;"	v
xs	scratch/logistic_regression.py	/^xs = [[1.0] + row[:2] for row in data]  # [1, experience, salary]$/;"	v
xs	scratch/machine_learning.py	/^xs = [x for x in range(1000)]  # xs are 1 ... 1000$/;"	v
xs	scratch/probability.py	/^xs = [x \/ 10.0 for x in range(-50, 50)]$/;"	v
xs	scratch/statistics.py	/^xs = range(101)                         # largest value is 100$/;"	v
xs	scratch/visualization.py	/^xs = [i for i, _ in enumerate(variance)]$/;"	v
xs	scratch/working_with_data.py	/^xs = [random_normal() for _ in range(1000)]$/;"	v
xy	scratch/visualization.py	/^        xy=(friend_count, minute_count), # Put the label with its point$/;"	v
xytext	scratch/visualization.py	/^        xytext=(5, -5),                  # but slightly offset$/;"	v
y	scratch/crash_course_in_python.py	/^y = 2 in s     # equals True$/;"	v
y	scratch/crash_course_in_python.py	/^y = apply_to_one(lambda x: x + 4)      # equals 5$/;"	v
y	scratch/crash_course_in_python.py	/^y = sorted(x)     # y is [1, 2, 3, 4], x is unchanged$/;"	v
y	scratch/crash_course_in_python.py	/^y = x + [4, 5, 6]       # y is [1, 2, 3, 4, 5, 6]; x is unchanged$/;"	v
y	scratch/crash_course_in_python.py	/^y = x[-1]        # equals 0$/;"	v
y	scratch/multiple_regression.py	/^y = 30$/;"	v
y	scratch/simple_linear_regression.py	/^y = [3 * i - 5 for i in x]$/;"	v
years	scratch/visualization.py	/^years = [1950, 1960, 1970, 1980, 1990, 2000, 2010]$/;"	v
years	scratch/visualization.py	/^years = [2017, 2018]$/;"	v
ys	scratch/logistic_regression.py	/^ys = [row[2] for row in data]           # paid_account$/;"	v
ys	scratch/machine_learning.py	/^ys = [2 * x for x in xs]       # each y_i is twice x_i$/;"	v
ys	scratch/statistics.py	/^ys = [friend_counts[x] for x in xs]     # height is just # of friends$/;"	v
ys1	scratch/working_with_data.py	/^ys1 = [ x + random_normal() \/ 2 for x in xs]$/;"	v
ys2	scratch/working_with_data.py	/^ys2 = [-x + random_normal() \/ 2 for x in xs]$/;"	v
z	scratch/crash_course_in_python.py	/^z = 3 in s     # equals False$/;"	v
z	scratch/crash_course_in_python.py	/^z = len(x)       # equals 4$/;"	v
z	scratch/inference.py	/^z = a_b_test_statistic(1000, 200, 1000, 150)    # -2.94$/;"	v
z	scratch/inference.py	/^z = a_b_test_statistic(1000, 200, 1000, 180)    # -1.14$/;"	v
z_dict	scratch/crash_course_in_python.py	/^z_dict = {"z": 3}$/;"	v
zero	scratch/crash_course_in_python.py	/^zero = x[0]          # equals 0, lists are 0-indexed$/;"	v
zeros	scratch/crash_course_in_python.py	/^zeros = [0 for _ in even_numbers]      # has the same length as even_numbers$/;"	v
zeros_like	scratch/deep_learning.py	/^def zeros_like(tensor: Tensor) -> Tensor:$/;"	f
zeros_like	scratch/nlp.py	/^from scratch.deep_learning import Layer, Tensor, random_tensor, zeros_like$/;"	i
